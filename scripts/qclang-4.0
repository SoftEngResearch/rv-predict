#!/bin/sh

#
# Note: this is a more-or-less "portable" Bourne shell script.
# That is, it is not reliant on any bash-isms.
#

set -e
set -u

#
# Set defaults.
#
opt_x86_64_def=-D__X86_64__
platform=x86_64
platform_path=x86_64-pc-nto-qnx7.0.0
targetname=x86_64-pc-qnx-gnu
opt_mcmodel="-mcmodel=small"
opt_pic="pic"

# Filter out arguments that should not be passed to the compiler.
# Quote args to make them safe in the shell.
# Usage: quotedlist="$(shell_quote args...)"
#
# Use the returned string by evaling it inside
# double quotes, like this:
#    eval "set -- $quotedlist"
# or like this:
#    eval "\$command $quotedlist \$filename"
#
filter_noncc_arguments()
{(
	local result=''
	local arg qarg
	LC_COLLATE=C ; export LC_COLLATE # so [a-zA-Z0-9] works in ASCII
	for arg in "$@" ; do
		case "${arg}" in
		-Vgcc_nto*)
			continue
			;;
		'')
			qarg="''"
			;;
		*[!-./a-zA-Z0-9]*)
			# Convert each embedded ' to '\'',
			# then insert ' at the beginning of the first line,
			# and append ' at the end of the last line.
			# Finally, elide unnecessary '' pairs at the
			# beginning and end of the result and as part of
			# '\'''\'' sequences that result from multiple
			# adjacent quotes in he input.
			qarg="$(printf "%s\n" "$arg" | \
			    ${SED:-sed} -e "s/'/'\\\\''/g" \
				-e "1s/^/'/" -e "\$s/\$/'/" \
				-e "1s/^''//" -e "\$s/''\$//" \
				-e "s/'''/'/g"
				)"
			;;
		*)
			# Arg is not the empty string, and does not contain
			# any unsafe characters.  Leave it unchanged for
			# readability.
			qarg="${arg}"
			;;
		esac
		result="${result}${result:+ }${qarg}"
	done
	printf "%s\n" "$result"
)}

rewrite_cc_to_ld_arguments()
{(
	local result=''
	local arg qarg
	LC_COLLATE=C ; export LC_COLLATE # so [a-zA-Z0-9] works in ASCII
	for arg in "$@" ; do
		case "${arg}" in
		'')
			qarg="''"
			;;
		*[!-./a-zA-Z0-9]*|-Wl,*)
			# Convert each embedded ' to '\'',
			# then insert ' at the beginning of the first line,
			# and append ' at the end of the last line.
			# Finally, elide unnecessary '' pairs at the
			# beginning and end of the result and as part of
			# '\'''\'' sequences that result from multiple
			# adjacent quotes in he input.
			qarg="$(printf "%s\n" "${arg}" | \
			    ${SED:-sed} -e "s/'/'\\\\''/g" \
				-e "1s/^/'/" -e "\$s/\$/'/" \
				-e "1s/^''//" -e "\$s/''\$//" \
				-e "s/'''/'/g" \
				-e "s/-Wl,-\([^,]\+\),/-\1/" -e "s/-Wl,//"
				)"
			;;
		*)
			# Arg is not the empty string, and does not contain
			# any unsafe characters.  Leave it unchanged for
			# readability.
			qarg="${arg##-Wl,}"
			;;
		esac
		result="${result}${result:+ }${qarg}"
	done
	printf "%s\n" "$result"
)}

if [ ${QNX_TARGET:-unknown} = unknown ]; then
	export QNX_TARGET=${HOME}/qnx700/target/qnx7
fi
if [ ${QNX_HOST:-unknown} = unknown ]; then
	export QNX_HOST=${HOME}/qnx700/host/linux/x86_64
fi
export PATH=${QNX_HOST}/usr/bin:${PATH}

cplusplus=no
compile=yes
link=yes
just_print=no
ldflags=
posix_ldflags=
post_ldflags=

prog=$(basename $0)

if [ ${prog%%ld} != ${prog} ]; then
	echo "${prog}: not implemented" 1>&2
	exit 1
fi

if [ ${prog%%++} != ${prog} ]; then
	cplusplus=yes
fi

for arg in "$@"; do
	case "$arg" in
	--)	break
		;;
	--just-print)
		just_print=yes
		continue
		;;
	-Vgcc_nto*)
		case "${arg##-Vgcc_nto}" in
		aarch64le)
			opt_x86_64_def=
			platform=aarch64le
			platform_path=aarch64-unknown-nto-qnx7.0.0
			targetname=aarch64-unknown-qnx-gnu
			opt_mcmodel=
			opt_pic=
			;;
		x86_64)
			opt_x86_64_def=-D__X86_64__
			platform=x86_64
			platform_path=x86_64-pc-nto-qnx7.0.0
			targetname=x86_64-pc-qnx-gnu
			opt_mcmodel="-mcmodel=small"
			opt_pic="pic"
			;;
		*)
			echo "${prog}: unknown architecture ${arg##-Vgcc_nto}" 1>&2
			exit 1
			;;
		esac
		continue
		;;
	-M|-E)	# -M implies -E, and -E skips normal compilation
		compile=no
		link=no
		continue
		;;
	-[cS]|-shared)
		link=no
		continue
		;;
	*.cc|*.cp|*.cxx|*.cpp|*.CPP|*.c++|*.C)
		cplusplus=yes
		;;
	esac
done

_posix_ldflags="-L$(dirname $0)/../lib/${platform}-qnx -lrvpmissing_posix"

quoted_list=$(filter_noncc_arguments "$@")
eval "set -- ${quoted_list}"

#
# Now that we have parsed the arguments, we have the information (such as
# target platform) that we need to set the options for a QNX cross-build.
#

# -nostdinc -Asystem(unix)
cflags="-target ${targetname} ${opt_mcmodel} -D__LANGUAGE_C -D_LANGUAGE_C -D__QNX__ -D__QNXNTO__ -D__unix__ -D__unix -D__ELF__ -fPIE ${opt_x86_64_def} -D__LITTLEENDIAN__ -nostdlib --sysroot=${QNX_HOST} -isystem ${QNX_TARGET}/usr/include -isystem ${QNX_HOST}/usr/include"

_ldflags="-Wl,--dynamic-linker=/usr/lib/ldqnx-64.so.2"
_ldflags="${_ldflags:-} -Wl,--sysroot=${QNX_TARGET}/${platform}"
_ldflags="${_ldflags:-} -Wl,--hash-style=gnu -Wl,--warn-shared-textrel"
_ldflags="${_ldflags:-} -Wl,-zrelro"
_ldflags="${_ldflags:-} -Wl,-znow -Wl,--eh-frame-hdr"

_ldflags="${_ldflags:-} ${QNX_TARGET}/${platform}/lib/crt1.o"
_ldflags="${_ldflags:-} ${QNX_TARGET}/${platform}/lib/crti.o"
_ldflags="${_ldflags:-} ${QNX_HOST}/usr/lib/gcc/${platform_path}/5.4.0/${opt_pic}/crtbegin.o"
_ldflags="${_ldflags:-} -Wl,-rpath-link=${QNX_TARGET}/${platform}/lib -Wl,-rpath-link=${QNX_TARGET}/${platform}/usr/lib -Wl,-rpath-link=${QNX_TARGET}/${platform}/lib/gcc/5.4.0 -Wl,-rpath-link=${QNX_TARGET}/${platform}/opt/lib"
_ldflags="${_ldflags:-} -Wl,-Y${QNX_TARGET}/${platform}/lib -Wl,-Y${QNX_TARGET}/${platform}/usr/lib -Wl,-Y${QNX_TARGET}/${platform}/opt/lib"
_ldflags="${_ldflags:-} -L${QNX_HOST}/usr/lib/gcc/${platform_path}/5.4.0"
_ldflags="${_ldflags:-} -L${QNX_TARGET}/${platform}/lib/gcc/5.4.0"
_ldflags="${_ldflags:-} -L${QNX_TARGET}/usr/${platform_path}/lib"
_ldflags="${_ldflags:-} -L${QNX_TARGET}/${platform}/lib"
_ldflags="${_ldflags:-} -L${QNX_TARGET}/${platform}/usr/lib"
_ldflags="${_ldflags:-} -L${QNX_TARGET}/${platform}/opt/lib"

#
# %(ftest-coverage: %(!fprofile-arcs: ${QNX_HOST}/usr/lib/gcc/${platform_path}/5.4.0/%(!nopie:pic/)libgcov.a)) %(fprofile-arcs: ${QNX_HOST}/usr/lib/gcc/${platform_path}/5.4.0/%(!nopie:pic/)libgcov.a)
#
# -lcS -> -lc%(!nopie:S)
#
_post_ldflags="${_post_ldflags:-} ${QNX_HOST}/usr/lib/gcc/${platform_path}/5.4.0/${opt_pic}/libgcc.a"
_post_ldflags="${_post_ldflags:-} -lc -Bstatic -lcS"
_post_ldflags="${_post_ldflags:-} ${QNX_HOST}/usr/lib/gcc/${platform_path}/5.4.0/${opt_pic}/libgcc.a"

_post_ldflags="${_post_ldflags:-} ${QNX_HOST}/usr/lib/gcc/${platform_path}/5.4.0/${opt_pic}/crtend.o"
_post_ldflags="${_post_ldflags:-} ${QNX_TARGET}/${platform}/lib/crtn.o"

if [ ${compile} = yes -a ${RVP_SETUP:-no} = no ]; then
	cflags="${cflags} -include $(dirname $0)/../include/qnx/rvpredict_missing_posix.h"
fi

if [ ${prog##q} = rvpld ]; then
	compiler=ld
	cflags=
elif [ ${cplusplus:-no} = yes ]; then
	compiler="clang++-4.0 -std=c++11"
else
	compiler=clang-4.0
fi

if [ ${just_print} = yes ]; then
	pfx=echo
else
	pfx=
fi

if [ ${prog##q} = rvpld ]; then
	ldflags=$(echo ${_ldflags} | sed 's/-Wl,//g')
	post_ldflags=$(echo ${_post_ldflags} | sed 's/-Wl,//g')
	posix_ldflags=$(echo ${_posix_ldflags} | sed 's/-Wl,//g')
elif [ ${link} = yes ]; then
	# Use the right linker for aarch64le; otherwise, use host's (!)
	# linker.
	if [ ${platform} = aarch64le ]; then
		cflags=-nostdlib
		compiler=${QNX_HOST}/usr/bin/aarch64-unknown-nto-qnx7.0.0-ld
		quoted_list=$(rewrite_cc_to_ld_arguments "$@")
		eval "set -- ${quoted_list}"
		ldflags=$(echo ${_ldflags} | sed 's/-Wl,//g')
		post_ldflags=$(echo ${_post_ldflags} | sed 's/-Wl,//g')
		posix_ldflags=$(echo ${_posix_ldflags} | sed 's/-Wl,//g')
	else
		ldflags="${cflags} ${_ldflags}"
		post_ldflags=${_post_ldflags}
		posix_ldflags=${_posix_ldflags}
	fi
fi

#echo link=${link} 1>&2
#echo _ldflags=${_ldflags} 1>&2

$pfx $compiler ${cflags} ${ldflags} "$@" ${post_ldflags} ${posix_ldflags}
