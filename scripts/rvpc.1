.\"     $NetBSD: mdoc.template,v 1.7 2002/07/10 11:57:12 yamt Exp $
.\"
.\" Copyright (c) 2017 Runtime Verification, Inc.
.\"
.\" The uncommented requests are required for all man pages.
.\" The commented requests should be uncommented and used where appropriate.
.Dd April 23, 2018
.Dt rvpc 1
.Os Linux
.Sh NAME
.Nm rvpc
.Nd instrumenting compiler for
.Tn RV-Predict/C ,
the data-race predictor
.Sh SYNOPSIS
.Nm
.Op Xr clang 1 options
.Op Fl Fl intr-personality Ns = Ns Ar personality
.Op Fl Fl sigsim Ns = Ns Ar simulation
.Op Fl o Ar program
.Nm rvpc++
.Op Xr clang 1 options
.Op Fl Fl intr-personality Ns = Ns Ar personality
.Op Fl Fl sigsim Ns = Ns Ar simulation
.Op Fl o Ar program
.\" Don't break words
.Bk
.Op Ar infile ...
.Ek
.Sh DESCRIPTION
.Nm
compiles a C or C++ program with instrumentation that produces a trace
of the program's run-time behavior.
The trace records events including memory loads and stores,
lock acquisition and release, thread creation and destruction.
The trace is analyzed by
.Tn RV-Predict/C ,
which searches feasible schedules of the trace events for schedules
that produce
.Em data races .
.Pp
.Nm
can be used as a drop-in replacement for
.Xr clang 1 .
It
forwards its command-line arguments to
.Xr clang 1 ,
adding arguments to insert
.Tn RV-Predict/C
instrumentation into the object files that
.Xr clang 1
emits, and to link
.Ar program
with the
.Tn RV-Predict/C
runtime and its dependencies.
.Pp
In the default
.Tn RV-Predict/C
operating mode,
.Ar program
sends a trace of its dynamic behavior over a pipe to a concurrent process
that performs data-race prediction.
Environment variables alter the operating mode.
Use
.Ev RVP_OFFLINE_ANALYSIS
to make the data-race prediction run after
the application code in
.Ar program
finishes.
Use
.Ev RVP_TRACE_ONLY
to make
.Ar program
leave a trace in the filesystem for
.Xr rvpa 1
to analyze offline.
See
.Sx ENVIRONMENT ,
below.
.Pp
Command-line options modify the behavior of
.Nm :
.Bl -tag -width "mmversion"
.It Fl Fl version
Print the version of
.Nm
and the version of
.Xr clang 1
and then exit.
.It Fl Fl sigsim Ns = Ns Ar simulation
.Tn RV-Predict/C
cannot find data races that involve signal handlers that do not run, but some
programs establish more handlers than they routinely run.
Use a
.Dq signal simulation
to compile and/or link a program with a library that simulates
spontaneous signals.
.Fl Fl sigsim Ns = Ns Ar simulation
makes
.Tn RV-Predict/C
compile and/or link with the named signals
.Ar simulation ,
one of:
.Pp
.Bl -tag -width "simple"
.It none
This is the default.
Simulate no signals.
.It simple
Intercept
.Ar program
when it changes the signal mask
.Po e.g., calls
.Xr pthread_sigmask 2 / Xr sigprocmask 2 / Xr sigsuspend 2
.Pc ,
establishes or disestablishes signal handlers
.Po calls Xr sigaction 2 / Xr signal 2
.Pc .
After
.Ar program
establishes a signal handler, raise the signal if the signal mask allows.
Before
.Ar program
disestablishes a signal handler, raise the signal if the mask allows.
Before
.Ar program
masks a signal where it has established a handler, raise the signal.
And after
.Ar program
unmasks a signal where a handler is established, raise the signal.
In this way, a signal is raised at least once (and often, twice) between
every change of signal state.
.El
.It Fl Fl intr-personality Ns = Ns Ar personality
.Tn RV-Predict/C
compiles and/or links with the given interrupt personality, which is
one of the following:
.Pp
.Bl -tag -width "basic"
.It 78k0
Under the
.Tn "Renesas 78k0"
interrupts model,
.Tn RV-Predict/C
provides macros
.Fn EI
and
.Fn DI
for enabling and disabling interrupts.
.Pp
An attribute
.Fn __rv_interrupt_handler irqname priority
may be applied to a function declaration/definition to indicate that the
function is an interrupt service routine
.Pq ISR
for the interrupt request
.Pq IRQ
.Fa irqname .
.Fa priority
tells the priority for the IRQ, one of
.Dv renesas_78k0_priority_low
or
.Dv renesas_78k0_priority_high ,
for the interrupt.
.Pp
.Tn RV-Predict/C
provides
.Fn "__rvpredict_isr_fire" "void (*isr)(void)"
for unit tests to use to trigger an asynchronous call to
.Fa isr ,
which must be a function that has an
.Fn __rv_interrupt_handler
annotation.
If
.Fa isr
is not allowed to run under the current condition of the
.Tn 78k0 
registers, then its execution will be deferred.
.It basic
This is a barebones interrupt model that is not yet intended for use by
end users.
.It none
This is the default.
If a program that is compiled with this interrupt personality uses
interrupt macros or functions, then its behavior is undefined.
.El
.El
.Sh EXIT STATUS
See
.Xr clang 1
for exit status.
.Sh ENVIRONMENT
.Bl -tag -width "RVP_TRACE_FILE"
.It Ev RVP_TRACE_FILE
a program built by
.Nm
writes its trace file to the custom path given by
.Ev RVP_TRACE_FILE
if the variable is present.
Otherwise, the program writes its trace file to
the default location.
.Ev RVP_TRACE_FILE
must name a file, not a directory.
The custom path may interpolate a value from the program using
a
.Dq \&%
followed by a formatting character:
.Bl -tag -width 4n -offset indent -compact
.It Sy n
the last pathname component of the executable file that is running
.It Sy p
the PID of the process, in decimal
.It Sy t
the approximate time when the program created its trace file, in seconds
since 00:00:00 on January 1, 1970, in decimal
.It Sy u
the username returned by
.Xr getlogin 2
.El
.Pp
.Po
These format characters are chosen to match the ones used by core name
templates in NetBSD.
See
.Xr core 5
in the NetBSD manual.
.Pc
.Pp
Use
.Dq \&%%
to interpolate a literal percent sign.
.Pp
.It Ev RVP_TRACE_FIFO
Works like
.Ev RVP_TRACE_FILE
except that
.Ar program
will not create a trace file.
.Ar program
will abort if a named pipe (FIFO) does not already exist at the given
path.
If the named pipe does exist, then
.Ar program
will write traces to it.
Value-interpolation works the same for
.Ev RVP_TRACE_FIFO
as for
.Ev RVP_TRACE_FILE .
.It Ev RVP_OFFLINE_ANALYSIS
.Ar program
will wait to begin analysis until after the application code has finished
running if
.Ev RVP_OFFLINE_ANALYSIS
is set to
.Dq yes .
.Ev RVP_OFFLINE_ANALYSIS
has no effect if
.Ev RVP_TRACE_ONLY
is set to
.Dq yes .
.It Ev RVP_HTML_DIR
Unless online/offline analysis reports are disabled with
.Ev RVP_TRACE_ONLY
is
.Dq yes ,
.Ar program
will write an HTML report under the directory named by
.Ev RVP_HTML_DIR .
.It Ev RVP_TRACE_SIZE_LIMIT
.Ar program
exits by calling
.Xr abort 3
when its trace-file size reaches or exceeds
the decimal number
.Ev RVP_TRACE_SIZE_LIMIT .
A suffix
.Dq k ,
.Dq M ,
or
.Dq G
indicates multiplication by
1024, 1024 * 1024, or 1024 * 1024 * 1024, respectively.
.It Ev RVP_TRACE_ONLY
Finding
.Ev RVP_TRACE_ONLY
set to
.Dq yes
when it runs,
.Ar program
records a trace of its dynamic behavior to a file in the current working
directory called
.Pa rvpredict.trace .
.Pp
Run
.Xr rvpa 1 
to analyze the trace and produce a report of data races that
.Tn RV-Predict/C
predicts.
.It Ev RVP_ANALYSIS_ARGS
Affects the automatic data-race prediction.
See
.Xr rvpa 1 .
.It Ev RVP_OFFLINE_ANALYSIS
If this variable is not in the environment, or if it is not set to
.Dq yes ,
then the application code in
.Ar program
will run concurrently with the data-race prediction;
output from the data-race predictor will intermingle with output from
.Ar program
output on the standard error stream.
If
.Ev RVP_OFFLINE_ANALYSIS
is set to
.Dq yes ,
then data-race prediction will run after
.Ar program
calls
.Xr exit 2
or is cancelled with a signal.
If
.Ev RVP_TRACE_ONLY
is set to
.Dq yes
in the environment, then 
.Ev RVP_OFFLINE_ANALYSIS
has no effect.
.It Ev RVP_WINDOW_SIZE
Affects the automatic data-race prediction.
See
.Xr rvpa 1 .
.El
.Sh FILES
.Bl -tag -width "/usr/share/examples/rv-predict-c/"
.It Pa /usr/share/doc/rv-predict-c/USERS-MANUAL.md
.Tn RV-Predict/C
Users Manual
.It Pa /usr/share/examples/rv-predict-c/
demonstration programs in C and C++
.It Pa /usr/lib/rvpinstrument.so
a compiler pass that adds
.Tn RV-Predict/C
instrumentation to your program.
The pass is run on
.Nm Ap s
behalf by
.Xr clang 1 .
.It Pa /usr/lib/librvprt.a
the
.Tn RV-Predict/C
runtime library.
.Nm
links
.Pa librvprt.a
with every executable it creates.
.El
.Sh EXAMPLES
Build the demonstration program
called
.Nm lpcq
in
.Pa /usr/share/examples/rv-predict-c/c11
with
.Tn RV-Predict/C
instrumentation:
.Bd -literal
$ rvpc -o lpcq lpcq.c lpcq_main.c signals.c
.Ed
.Pp
Run it to see the data-race predictions:
.Bd -literal
$ ./lpcq
read item 0
read item 1
read item 2
read item 3
read item 4
Data race on q.tailp at lpcq_main.c;main:
    Read in thread 2
      > in lpcq_get at .../c11/lpcq.c:26:19
        in consume at .../c11/lpcq_main.c:104
    Thread 2 created by thread 1
        in main at .../c11/lpcq_main.c:230

    Write in thread 1
      > in lpcq_put at .../c11/lpcq.c:48
        in produce at .../c11/lpcq_main.c:164
        in main at .../c11/lpcq_main.c:243
    Thread 1 is the main thread


Data race on [0x0000000000612080]:
    Read in thread 2
      > in lpcq_get at .../c11/lpcq.c:34:2
        in consume at .../c11/lpcq_main.c:104
    Thread 2 created by thread 1
        in main at .../c11/lpcq_main.c:230

    Write in thread 1
      > in lpcq_put at .../c11/lpcq.c:49
        in produce at .../c11/lpcq_main.c:164
        in main at .../c11/lpcq_main.c:243
    Thread 1 is the main thread
.Ed
.Pp
Run it in trace-only mode, and look for the trace file:
.Bd -literal
$ RVP_TRACE_ONLY=yes ./lpcq
read item 0
read item 1
read item 2
read item 3
read item 4
$ ls -l rvpredict.trace 
-rw------- 1 johndoe johndoe 6164 Jul 19 17:27 rvpredict.trace
.Ed
.Pp
Finally, analyze the trace:
.Bd -literal
$ rvpa ./lpcq
Data race on q.tailp at lpcq_main.c;main:
    Read in thread 2
      > in lpcq_get at .../c11/lpcq.c:26:19
        in consume at .../c11/lpcq_main.c:104
    Thread 2 created by thread 1
        in main at .../c11/lpcq_main.c:230

    Write in thread 1
      > in lpcq_put at .../c11/lpcq.c:48
        in produce at .../c11/lpcq_main.c:164
        in main at .../c11/lpcq_main.c:243
    Thread 1 is the main thread


Data race on [0x0000000000612080]:
    Read in thread 2
      > in lpcq_get at .../c11/lpcq.c:34:2
        in consume at .../c11/lpcq_main.c:104
    Thread 2 created by thread 1
        in main at .../c11/lpcq_main.c:230

    Write in thread 1
      > in lpcq_put at .../c11/lpcq.c:49
        in produce at .../c11/lpcq_main.c:164
        in main at .../c11/lpcq_main.c:243
    Thread 1 is the main thread
.Ed
.Pp
Several example programs are in
.Pa /usr/share/examples/rv-predict-c/ .
.\" This next request is for sections 1, 6, 7 & 8 only
.\"     (command return values (to shell) and fprintf/stderr type diagnostics).
.\" .Sh DIAGNOSTICS
.\" The next request is for sections 2 and 3 error and signal handling only.
.\" .Sh ERRORS
.Sh SEE ALSO
.\" Cross-references should be ordered by section (low to high), then in
.\"     alphabetical order.
.Xr clang 1 ,
.Xr rvpa 1 ,
.Xr rvpx 1
.Sh STANDARDS
.Nm
respects the definition of data races between threads given in the
C11 standard.
.Sh HISTORY
.Tn RV-Predict/C
1.9 was released in February 2018.
.Pp
.Tn RV-Predict/C
2.0 was released in July 2018.
.Sh AUTHORS
.An "Runtime Verification, Inc." Aq support@runtimeverification.com
.\" .Sh CAVEATS
.\" .Sh BUGS
.Sh SECURITY CONSIDERATIONS
A program compiled with
.Nm
writes a trace file either to
.Ev RVP_TRACE_FILE
or to the current working directory.
A trace file contains a record of memory loads and stores
(addresses
.Em and
values), as well as control flow information, for the lifetime
of the program.
Thus a trace file may capture private information such as passwords and
account numbers.
Users should treat a trace file with at least as much caution
as a core file.
