/*******************************************************************************
 * Copyright (c) 2013 University of Illinois
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 * 1. Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 ******************************************************************************/
package rvpredict.runtime;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.Date;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.locks.AbstractQueuedSynchronizer;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReadWriteLock;

import rvpredict.instrumentation.MetaData;
import rvpredict.logging.DBEngine;
import rvpredict.trace.EventType;

/**
 * RV-Predict runtime library that consists of instrumented methods for logging
 * trace events.
 * <p>
 * The instrumented methods are carefully designed to make sure that the logged
 * trace must satisfy the following properties:
 * <ul>
 * <li><b>Program order + Start/Join constraint</b>
 * <p>
 * Therefore, {@link EventType#START} and {@link EventType#PRE_JOIN} must be
 * logged before {@link Thread#start()} and {@link Thread#join()} respectively,
 * while {@link EventType#JOIN}, {@link EventType#JOIN_MAYBE_FAILED} must be
 * logged after {@link Thread#join()}.
 *
 * <li><b>Lock mutual exclusion</b>
 * <p>
 * Lock events must be logged after acquiring the lock, while unlock events must
 * be logged before releasing the lock.
 *
 * <li><b>Interrupt|Interrupted constraint</b>
 * <p>
 * Write on interrupted status generated by {@link Thread#interrupt()} must be
 * logged before the read-then-clear of interrupted status generated by blocking
 * method throwing the {@link InterruptedException}.
 * </ul>
 *
 * <b>Note:</b> we do not, however, guarantee absolute read-write consistency of
 * the logged trace because the running problem could be racey itself. For
 * example, suppose two read and write operations on shared variable {@code x}
 * are racey, the following scenarios are possible:
 *
 * <pre>
 * read-write race:  log(write, x, 1) ~> log(read, x, 0) ~> write(x, 1) ~> read(x, 1), where initValue(x) = 0
 * write-write race: log(write, x, 1) ~> log(write, x, 2) ~> write(x, 2) ~> write(x, 1), where initValue(x) = 0
 * </pre>
 *
 * Even worse, the data race in the program causes our logger to log events that
 * deviate from actual execution.
 * <p>
 * Nevertheless, we do guarantee the soundness of our prediction algorithm
 * <em>at least</em> up till the point that data races in the program mess up
 * the trace because 1) for each trace window, our prediction algorithm doesn't
 * care about the order of events from different threads as we are going to
 * reorder them anyway, and 2) the (incorrectly logged) final values of the
 * racey window <em>might</em> still be a possible outcome that can be inferred
 * from the actual execution.
 *
 * @see EventType
 *
 * @author YilongL
 *
 */
public final class RVPredictRuntime {

    private static final long MONITOR_C = 42L;
    private static final long ATOMIC_LOCK_C = 43L;

    private static int NATIVE_INTERRUPTED_STATUS_VAR_ID = MetaData.getVariableId(
            "java.lang.Thread", "$interruptedStatus");
    private static int ATOMIC_BOOLEAN_MOCK_VAL_ID = MetaData.getVariableId(
            "java.util.concurrent.atomic.AtomicBoolean", "$value");
    private static int AQS_MOCK_STATE_ID = MetaData.getVariableId(
            "java.util.concurrent.locks.AbstractQueuedSynchronizer", "$state");

    private static final Method AQS_GET_STATE;
    private static final Method AQS_SET_STATE;
    private static final Method AQS_CAS_STATE;

    static {
        Method aqsGetState = null;
        Method aqsSetState = null;
        Method aqsCASState = null;
        try {
            aqsGetState = AbstractQueuedSynchronizer.class.getDeclaredMethod("getState");
            aqsSetState = AbstractQueuedSynchronizer.class.getDeclaredMethod("setState", int.class);
            aqsCASState = AbstractQueuedSynchronizer.class.getDeclaredMethod("compareAndSetState", int.class, int.class);

            aqsGetState.setAccessible(true);
            aqsSetState.setAccessible(true);
            aqsCASState.setAccessible(true);
        } catch (NoSuchMethodException | SecurityException e) {
            e.printStackTrace();
        }

        AQS_GET_STATE = aqsGetState;
        AQS_SET_STATE = aqsSetState;
        AQS_CAS_STATE = aqsCASState;
    }

    private static ConcurrentHashMap<Lock, ReadWriteLock> readLockToRWLock = new ConcurrentHashMap<>();
    private static ConcurrentHashMap<Lock, ReadWriteLock> writeLockToRWLock = new ConcurrentHashMap<>();
    private static ConcurrentHashMap<Condition, Lock> conditionToLock = new ConcurrentHashMap<>();

    private static DBEngine db;

    private RVPredictRuntime() { } // forbid initialization

    // TODO(YilongL): move this method out of the runtime library
    public static void init(DBEngine db) {
        RVPredictRuntime.db = db;
    }

    /**
     * Logs the {@code BRANCH} event produced by jmp or tableswitch
     * instructions.
     *
     * @param locId
     *            the location identifier of the event
     */
    public static void logBranch(int locId) {
        db.saveEvent(EventType.BRANCH, locId);
    }

    /**
     * Logs events produced by invoking {@code object.wait()}.
     *
     * @param locId
     *            the location identifier of the event
     * @param object
     *            the {@code Object} whose {@code wait()} method is invoked
     */
    public static void rvPredictWait(int locId, Object object) throws InterruptedException {
        rvPredictWait(locId, object, 0);
    }

    /**
     * Logs events produced by invoking {@code object.wait(long)}.
     *
     * @param locId
     *            the location identifier of the event
     * @param object
     *            the {@code Object} whose {@code wait(long)} method is invoked
     * @param timeout
     *            the first argument of {@code object.wait(long)}
     */
    public static void rvPredictWait(int locId, Object object, long timeout)
            throws InterruptedException {
        long monitorId = calcMonitorId(object);
        db.saveEvent(EventType.WAIT_REL, locId, monitorId);
        try {
            object.wait(timeout);
        } catch (InterruptedException e) {
            onBlockingMethodInterrupted(locId);
            db.saveEvent(EventType.WAIT_ACQ, locId, monitorId);
            throw e;
        }

        onBlockingMethodNormalReturn(locId);
        db.saveEvent(EventType.WAIT_ACQ, locId, monitorId);
    }

    /**
     * Logs events produced by invoking {@code object.wait(long, int)}.
     *
     * @param locId
     *            the location identifier of the event
     * @param object
     *            the {@code Object} whose {@code wait(long, int)} method is
     *            invoked
     * @param timeout
     *            the first argument of {@code object.wait(long, int)}
     * @param nano
     *            the second argument of {@code object.wait(long, int)}
     */
    public static void rvPredictWait(int locId, Object object, long timeout, int nano)
            throws InterruptedException {
        long monitorId = calcMonitorId(object);
        db.saveEvent(EventType.WAIT_REL, locId, monitorId);
        try {
            object.wait(timeout, nano);
        } catch (InterruptedException e) {
            onBlockingMethodInterrupted(locId);
            db.saveEvent(EventType.WAIT_ACQ, locId, monitorId);
            throw e;
        }

        onBlockingMethodNormalReturn(locId);
        db.saveEvent(EventType.WAIT_ACQ, locId, monitorId);
    }

    /**
     * Logs the {@code LOCK} event produced by entering block synchronized with
     * {@code object}'s intrinsic lock.
     *
     * @param locId
     *            the location identifier of the event
     * @param object
     *            the {@code Object} whose intrinsic lock is acquired
     */
    public static void logMonitorEnter(int locId, Object object) {
        db.saveEvent(EventType.WRITE_LOCK, locId, calcMonitorId(object));
    }

    /**
     * Logs the {@code UNLOCK} event produced by exiting block synchronized with
     * {@code object}'s intrinsic lock.
     *
     * @param locId
     *            the location identifier of the event
     * @param object
     *            the {@code Object} whose intrinsic lock is released
     */
    public static void logMonitorExit(int locId, Object object) {
        db.saveEvent(EventType.WRITE_UNLOCK, locId, calcMonitorId(object));
    }

    /**
     * Logs the {@code READ/WRITE} event produced by field access.
     *
     * @param locId
     *            the location identifier of the event
     * @param object
     *            the owner object of the field; {@code null} when accessing
     *            static fields
     * @param variableId
     *            the variable identifier of the field
     * @param value
     *            the value written by the write access or the value read by the
     *            read access
     * @param isWrite
     *            specifies if it is a write access
     * @param branchModel
     *            specifies if we use branch model
     */
    public static void logFieldAcc(int locId, Object object, int variableId, Object value,
            boolean isWrite, boolean branchModel) {
        variableId = RVPredictRuntime.resolveVariableId(variableId);
        db.saveEvent(isWrite ? EventType.WRITE : EventType.READ, locId,
                System.identityHashCode(object), -variableId, objectToLong(value));
        if (!isPrimitiveWrapper(value) && branchModel) {
            // TODO(YilongL): what does it mean?
            // shared object reference variable deference
            // make it as a branch event
            logBranch(-1);
        }
    }

    /**
     * Logs the {@code READ/WRITE} event produced by array access.
     *
     * @param locId
     *            the location identifier of the event
     * @param array
     *            the array to access
     * @param index
     *            the array index
     * @param value
     *            the value written by the write access or the value read by the
     *            read access
     * @param isWrite
     *            specifies if it is a write access
     */
    public static void logArrayAcc(int locId, Object array, int index, Object value, boolean isWrite) {
        db.saveEvent(isWrite ? EventType.WRITE : EventType.READ, locId,
                System.identityHashCode(array), index, objectToLong(value));
    }

    /**
     * Logs the {@code INIT} event produced by initializing a field.
     *
     * @param locId
     *            the location identifier of the event
     * @param object
     *            the owner object of the field; {@code null} when initializing
     *            static field
     * @param variableId
     *            the variable identifier
     * @param value
     *            the initial value of the field
     */
    public static void logFieldInit(int locId, Object object, int variableId, Object value) {
        variableId = RVPredictRuntime.resolveVariableId(variableId);
        db.saveEvent(EventType.INIT, locId, System.identityHashCode(object), -variableId,
                objectToLong(value));
    }

    /**
     * Logs the {@code INIT} event produced by initializing an array element.
     *
     * @param locId
     *            the location identifier of the event
     * @param object
     *            the array of the field
     * @param index
     *            the array index
     * @param value
     *            the initial value of the element
     */
    public static void logArrayInit(int locId, Object array, int index, Object value) {
        db.saveEvent(EventType.INIT, locId, System.identityHashCode(array), index,
                objectToLong(value));
    }

    /**
     * Logs the {@code START} event produced by invoking {@code thread.start()}.
     *
     * When starting a new thread, a consistent unique identifier of the thread
     * is created, and stored into a map with the thread id as the key. The
     * unique identifier, i.e, name, is a concatenation of the name of the
     * parent thread with the order of children threads forked by the parent
     * thread.
     *
     * @param locId
     *            the location identifier of the event
     * @param thread
     *            the {@code Thread} object whose {@code start()} method is
     *            invoked
     */
    public static void rvPredictStart(int locId, Thread thread) {
        db.saveEvent(EventType.INIT, locId, System.identityHashCode(thread),
                -NATIVE_INTERRUPTED_STATUS_VAR_ID, 0);
        db.saveEvent(EventType.START, locId, thread.getId());
        thread.start();
    }

    /**
     * Logs the {@code JOIN} event produced by invoking {@code thread.join()}.
     *
     * @param locId
     *            the location identifier of the event
     * @param thread
     *            the {@code Thread} object whose {@code join()} method is
     *            invoked
     */
    public static void rvPredictJoin(int locId, Thread thread) throws InterruptedException {
        rvPredictJoin(locId, thread, 0);
    }

    /**
     * Logs the {@code JOIN} event produced by invoking
     * {@code thread.join(long)}.
     *
     * @param locId
     *            the location identifier of the event
     * @param thread
     *            the {@code Thread} object whose {@code join(long)} method is
     *            invoked
     * @param millis
     *            the first argument of {@code thread.join(long)}
     */
    public static void rvPredictJoin(int locId, Thread thread, long millis)
            throws InterruptedException {
        db.saveEvent(EventType.PRE_JOIN, locId, thread.getId());
        try {
            thread.join(millis);
        } catch (InterruptedException e) {
            onBlockingMethodInterrupted(locId);
            db.saveEvent(EventType.JOIN_MAYBE_FAILED, locId, thread.getId());
            throw e;
        }

        onBlockingMethodNormalReturn(locId);
        db.saveEvent(millis == 0 ? EventType.JOIN : EventType.JOIN_MAYBE_FAILED, locId,
                thread.getId());
    }

    /**
     * Logs the {@code JOIN} event produced by invoking
     * {@code thread.join(long, int)}.
     *
     * @param locId
     *            the location identifier of the event
     * @param thread
     *            the {@code Thread} object whose {@code join(long, int)} method
     *            is invoked
     * @param millis
     *            the first argument of {@code thread.join(long, int)}
     * @param nanos
     *            the second argument of {@code thread.join(long, int)}
     *
     */
    public static void rvPredictJoin(int locId, Thread thread, long millis, int nanos)
            throws InterruptedException {
        db.saveEvent(EventType.PRE_JOIN, locId, thread.getId());
        try {
            thread.join(millis, nanos);
        } catch (InterruptedException e) {
            onBlockingMethodInterrupted(locId);
            db.saveEvent(EventType.JOIN_MAYBE_FAILED, locId, thread.getId());
            throw e;
        }

        onBlockingMethodNormalReturn(locId);
        db.saveEvent(millis == 0 && nanos == 0 ? EventType.JOIN : EventType.JOIN_MAYBE_FAILED,
                locId, thread.getId());
    }

    /**
     * Logs the events produced by invoking {@code Thread#sleep(long)}.
     *
     * @param locId
     *            the location identifier of the event
     * @param millis
     *            the first argument of {@code Thread#sleep(long)}
     */
    public static void rvPredictSleep(int locId, long millis) throws InterruptedException {
        try {
            Thread.sleep(millis);
        } catch (InterruptedException e) {
            onBlockingMethodInterrupted(locId);
            throw e;
        }
    }

    /**
     * Logs the events produced by invoking {@code Thread#sleep(long, int)}.
     *
     * @param locId
     *            the location identifier of the event
     * @param millis
     *            the first argument of {@code Thread#sleep(long, int)}
     * @param nanos
     *            the second argument of {@code Thread#sleep(long, int)}
     */
    public static void rvPredictSleep(int locId, long millis, int nanos)
            throws InterruptedException {
        try {
            Thread.sleep(millis, nanos);
        } catch (InterruptedException e) {
            onBlockingMethodInterrupted(locId);
            throw e;
        }
    }

    /**
     * Logs the events produced by invoking {@code thread.interrupt()}.
     *
     * @param locId
     *            the location identifier of the event
     * @param thread
     *            the {@code Thread} object whose {@code interrupt()} method is
     *            invoked
     */
    public static void rvPredictInterrupt(int locId, Thread thread) {
        try {
            if (thread != Thread.currentThread()) {
                thread.checkAccess();
            }

            /* TODO(YilongL): Interrupting a thread that is not alive need not
             * have any effect; yet I am not sure how to model such case
             * precisely so I just assume interrupted status will be set to true
             */

            /*
             * make sure the write on interrupted status is logged before the
             * read-and-clear events generated by the blocking method
             */
            db.saveEvent(EventType.WRITE, locId, System.identityHashCode(thread),
                    -NATIVE_INTERRUPTED_STATUS_VAR_ID, 1);
            thread.interrupt();
        } catch (SecurityException e) {
            throw e;
        }
    }

    /**
     * Logs the events produced by invoking {@code thread.isInterrupted()}.
     *
     * @param locId
     *            the location identifier of the event
     * @param thread
     *            the {@code Thread} object whose {@code isInterrupted()} method
     *            is invoked
     */
    public static boolean rvPredictIsInterrupted(int locId, Thread thread) {
        boolean isInterrupted = thread.isInterrupted();
        /*
         * the interrupted status is like an imaginary shared variable so we
         * need to record access to it to preserve soundness
         */
        db.saveEvent(EventType.READ, locId, System.identityHashCode(thread),
                -NATIVE_INTERRUPTED_STATUS_VAR_ID, isInterrupted ? 1 : 0);
        return isInterrupted;
    }

    /**
     * Logs the events produced by invoking {@code Thread#interrupted()}.
     *
     * @param locId
     *            the location identifier of the event
     */
    public static boolean rvPredictInterrupted(int locId) {
        boolean interrupted = Thread.interrupted();
        db.saveEvent(EventType.READ, locId, 0, -NATIVE_INTERRUPTED_STATUS_VAR_ID, interrupted ? 1
                : 0);
        /* clear interrupted status */
        db.saveEvent(EventType.WRITE, locId, System.identityHashCode(Thread.currentThread()),
                -NATIVE_INTERRUPTED_STATUS_VAR_ID, 0);
        return interrupted;
    }

    /**
     * Logs the {@code LOCK} event produced by invoking {@code Lock#lock()}.
     *
     * @param locId
     *            the location identifier of the event
     * @param lock
     *            the lock to acquire
     */
    public static void rvPredictLock(int locId, Lock lock) {
        lock.lock();
        db.saveEvent(getLockEventType(lock), locId, calcLockId(lock));
    }

    /**
     * Logs events produced by invoking {@code Lock#lockInterruptibly()}.
     *
     * @param locId
     *            the location identifier of the event
     * @param lock
     *            the lock to acquire
     * @throws InterruptedException
     *             see {@link Lock#lockInterruptibly()}
     */
    public static void rvPredictLockInterruptibly(int locId, Lock lock) throws InterruptedException {
        try {
            lock.lockInterruptibly();
            onBlockingMethodNormalReturn(locId);
            db.saveEvent(getLockEventType(lock), locId, calcLockId(lock));
        } catch (InterruptedException e) {
            onBlockingMethodInterrupted(locId);
            throw e;
        }
        ;
    }

    /**
     * Logs the {@code LOCK} event produced by invoking {@code Lock#tryLock()}.
     *
     * @param locId
     *            the location identifier of the event
     * @param lock
     *            the lock to acquire
     */
    public static boolean rvPredictTryLock(int locId, Lock lock) {
        boolean acquired = lock.tryLock();
        if (acquired) {
            db.saveEvent(getLockEventType(lock), locId, calcLockId(lock));
        }
        return acquired;
    }

    /**
     * Logs events produced by invoking {@code Lock#tryLock(long, TimeUnit)}.
     *
     * @param locId
     *            the location identifier of the event
     * @param lock
     *            the lock to acquire
     * @param time
     *            first argument of {@code Lock#tryLock(long, TimeUnit)}
     * @param unit
     *            second argument of {@code Lock#tryLock(long, TimeUnit)}.
     * @throws InterruptedException
     *             see {@link Lock#tryLock(long, TimeUnit)}
     */
    public static boolean rvPredictTryLock(int locId, Lock lock, long time, TimeUnit unit)
            throws InterruptedException {
        try {
            boolean acquired = lock.tryLock(time, unit);
            if (acquired) {
                onBlockingMethodNormalReturn(locId);
                db.saveEvent(EventType.WRITE_LOCK, locId, calcLockId(lock));
            }
            return acquired;
        } catch (InterruptedException e) {
            onBlockingMethodInterrupted(locId);
            throw e;
        }
    }

    /**
     * Logs the {@code UNLOCK} event produced by invoking {@code Lock#Unlock()}.
     *
     * @param locId
     *            the location identifier of the event
     * @param lock
     *            the lock to release
     */
    public static void rvPredictUnlock(int locId, Lock lock) {
        db.saveEvent(getUnlockEventType(lock), locId, calcLockId(lock));
        lock.unlock();
    }

    public static Condition rvPredictLockNewCondition(int locId, Lock lock) {
        Condition condition = lock.newCondition();
        conditionToLock.putIfAbsent(condition, lock);
        return condition;
    }

    public static Lock rvPredictReadWriteLockReadLock(int locId, ReadWriteLock readWriteLock) {
        Lock readLock = readWriteLock.readLock();
        readLockToRWLock.putIfAbsent(readLock, readWriteLock);
        return readLock;
    }

    public static Lock rvPredictReadWriteLockWriteLock(int locId, ReadWriteLock readWriteLock) {
        Lock writeLock = readWriteLock.writeLock();
        writeLockToRWLock.putIfAbsent(writeLock, readWriteLock);
        return writeLock;
    }

    public static void rvPredictConditionAwait(int locId, Condition condition)
            throws InterruptedException {
        long lockId = System.identityHashCode(conditionToLock.get(condition));
        db.saveEvent(EventType.WAIT_REL, locId, lockId);
        try {
            condition.await();
        } catch (InterruptedException e) {
            onBlockingMethodInterrupted(locId);
            db.saveEvent(EventType.WAIT_ACQ, locId, lockId);
            throw e;
        }

        onBlockingMethodNormalReturn(locId);
        db.saveEvent(EventType.WAIT_ACQ, locId, lockId);
    }

    public static boolean rvPredictConditionAwait(int locId, Condition condition, long time,
            TimeUnit unit) throws InterruptedException {
        boolean result;
        long lockId = System.identityHashCode(conditionToLock.get(condition));
        db.saveEvent(EventType.WAIT_REL, locId, lockId);
        try {
            result = condition.await(time, unit);
        } catch (InterruptedException e) {
            onBlockingMethodInterrupted(locId);
            db.saveEvent(EventType.WAIT_ACQ, locId, lockId);
            throw e;
        }

        onBlockingMethodNormalReturn(locId);
        db.saveEvent(EventType.WAIT_ACQ, locId, lockId);
        return result;
    }

    public static long rvPredictConditionAwaitNanos(int locId, Condition condition,
            long nanosTimeout) throws InterruptedException {
        long result;
        long lockId = System.identityHashCode(conditionToLock.get(condition));
        db.saveEvent(EventType.WAIT_REL, locId, lockId);
        try {
            result = condition.awaitNanos(nanosTimeout);
        } catch (InterruptedException e) {
            onBlockingMethodInterrupted(locId);
            db.saveEvent(EventType.WAIT_ACQ, locId, lockId);
            throw e;
        }

        onBlockingMethodNormalReturn(locId);
        db.saveEvent(EventType.WAIT_ACQ, locId, lockId);
        return result;
    }

    public static boolean rvPredictConditionAwaitUntil(int locId, Condition condition, Date deadline)
            throws InterruptedException {
        boolean result;
        long lockId = System.identityHashCode(conditionToLock.get(condition));
        db.saveEvent(EventType.WAIT_REL, locId, lockId);
        try {
            result = condition.awaitUntil(deadline);
        } catch (InterruptedException e) {
            onBlockingMethodInterrupted(locId);
            db.saveEvent(EventType.WAIT_ACQ, locId, lockId);
            throw e;
        }

        onBlockingMethodNormalReturn(locId);
        db.saveEvent(EventType.WAIT_ACQ, locId, lockId);
        return result;
    }

    public static void rvPredictConditionAwaitUninterruptibly(int locId, Condition condition) {
        long lockId = System.identityHashCode(conditionToLock.get(condition));
        db.saveEvent(EventType.WAIT_REL, locId, lockId);
        condition.awaitUninterruptibly();
        db.saveEvent(EventType.WAIT_ACQ, locId, lockId);
    }

    public static int rvPredictAbstractQueuedSynchronizerGetState(int locId,
            AbstractQueuedSynchronizer sync) {
        int result;
        try {
            synchronized (sync) {
                db.saveEvent(EventType.WRITE_LOCK, locId, calcAtomicLockId(sync));
                result = (int) AQS_GET_STATE.invoke(sync);
                db.saveEvent(EventType.READ, locId, System.identityHashCode(sync),
                        -AQS_MOCK_STATE_ID, result);
                db.saveEvent(EventType.WRITE_UNLOCK, locId, calcAtomicLockId(sync));
            }
        } catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException
                | SecurityException e) {
            throw new RuntimeException(e);
        }
        return result;
    }

    public static void rvPredictAbstractQueuedSynchronizerSetState(int locId,
            AbstractQueuedSynchronizer sync, int newState) {
        try {
            synchronized (sync) {
                db.saveEvent(EventType.WRITE_LOCK, locId, calcAtomicLockId(sync));
                AQS_SET_STATE.invoke(sync, newState);
                db.saveEvent(EventType.WRITE, locId, System.identityHashCode(sync),
                        -AQS_MOCK_STATE_ID, newState);
                db.saveEvent(EventType.WRITE_UNLOCK, locId, calcAtomicLockId(sync));
            }
        } catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException
                | SecurityException e) {
            throw new RuntimeException(e);
        }
    }

    public static boolean rvPredictAbstractQueuedSynchronizerCASState(int locId,
            AbstractQueuedSynchronizer sync, int expect, int update) {
        boolean result;
        try {
            synchronized (sync) {
                db.saveEvent(EventType.WRITE_LOCK, locId, calcAtomicLockId(sync));
                db.saveEvent(EventType.READ, locId, System.identityHashCode(sync),
                        -AQS_MOCK_STATE_ID, (int) AQS_GET_STATE.invoke(sync));
                result = (boolean) AQS_CAS_STATE.invoke(sync, expect, update);
                if (result) {
                    db.saveEvent(EventType.READ, locId, System.identityHashCode(sync),
                            -AQS_MOCK_STATE_ID, update);
                }
                db.saveEvent(EventType.WRITE_UNLOCK, locId, calcAtomicLockId(sync));
            }
        } catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException
                | SecurityException e) {
            throw new RuntimeException(e);
        }
        return result;
    }

    public static boolean rvPredictAtomicBoolGet(int locId, AtomicBoolean atomicBool) {
        boolean result;
        synchronized (atomicBool) {
            db.saveEvent(EventType.WRITE_LOCK, locId, calcAtomicLockId(atomicBool));
            result = atomicBool.get();
            db.saveEvent(EventType.READ, locId, System.identityHashCode(atomicBool),
                    -ATOMIC_BOOLEAN_MOCK_VAL_ID, result ? 1 : 0);
            db.saveEvent(EventType.WRITE_UNLOCK, locId, calcAtomicLockId(atomicBool));
        }
        return result;
    }

    public static void rvPredictAtomicBoolSet(int locId, AtomicBoolean atomicBool, boolean newValue) {
        synchronized (atomicBool) {
            db.saveEvent(EventType.WRITE_LOCK, locId, calcAtomicLockId(atomicBool));
            atomicBool.set(newValue);
            db.saveEvent(EventType.READ, locId, System.identityHashCode(atomicBool),
                    -ATOMIC_BOOLEAN_MOCK_VAL_ID, newValue ? 1 : 0);
            db.saveEvent(EventType.WRITE_UNLOCK, locId, calcAtomicLockId(atomicBool));
        }
    }

    public static boolean rvPredictAtomicBoolGAS(int locId, AtomicBoolean atomicBool,
            boolean newValue) {
        boolean result;
        synchronized (atomicBool) {
            db.saveEvent(EventType.WRITE_LOCK, locId, calcAtomicLockId(atomicBool));
            db.saveEvent(EventType.READ, locId, System.identityHashCode(atomicBool),
                    -ATOMIC_BOOLEAN_MOCK_VAL_ID, atomicBool.get() ? 1 : 0);
            result = atomicBool.getAndSet(newValue);
            db.saveEvent(EventType.WRITE, locId, System.identityHashCode(atomicBool),
                    -ATOMIC_BOOLEAN_MOCK_VAL_ID, newValue ? 1 : 0);
            db.saveEvent(EventType.WRITE_UNLOCK, locId, calcAtomicLockId(atomicBool));
        }
        return result;
    }

    public static boolean rvPredictAtomicBoolCAS(int locId, AtomicBoolean atomicBool,
            boolean expect, boolean update) {
        boolean result;
        synchronized (atomicBool) {
            db.saveEvent(EventType.WRITE_LOCK, locId, calcAtomicLockId(atomicBool));
            db.saveEvent(EventType.READ, locId, System.identityHashCode(atomicBool),
                    -ATOMIC_BOOLEAN_MOCK_VAL_ID, atomicBool.get() ? 1 : 0);
            result = atomicBool.compareAndSet(expect, update);
            if (result) {
                db.saveEvent(EventType.WRITE, locId, System.identityHashCode(atomicBool),
                        -ATOMIC_BOOLEAN_MOCK_VAL_ID, update ? 1 : 0);
            }
            db.saveEvent(EventType.WRITE_UNLOCK, locId, calcAtomicLockId(atomicBool));
        }
        return result;
    }

    /**
     * Logs the events produced by invoking
     * {@code System#arraycopy(Object, int, Object, int, int)}.
     *
     * @param locId
     *            the location identifier of the event
     */
    public static void rvPredictSystemArraycopy(int locId, Object src, int srcPos, Object dest,
            int destPos, int length) {
        // 8 primitive types: boolean, byte, char, short, int, long, float, and
        // double

        if (srcPos >= 0 && destPos >= 0 && length > 0) {
            if (src instanceof Object[]) {
                if (dest instanceof Object[]) {
                    if (srcPos + length <= ((Object[]) src).length
                            && destPos + length <= ((Object[]) dest).length) {
                        int k = length;
                        for (int i = 0; i < length; i++) {
                            Object srcObj = ((Object[]) src)[i + srcPos];
                            if (srcObj == null
                                    || dest.getClass().getComponentType()
                                            .isAssignableFrom(srcObj.getClass())) {
                                logArrayAcc(locId, src, srcPos + i, srcObj, false);
                            } else {
                                k = i;
                                break;
                            }
                        }
                        for (int i = 0; i < k; i++) {
                            logArrayAcc(locId, dest, destPos + i, ((Object[]) src)[i + srcPos], true);
                        }
                    }
                }
            } else if (src instanceof boolean[]) {
                if (dest instanceof boolean[]) {
                    if (srcPos + length <= ((boolean[]) src).length
                            && destPos + length <= ((boolean[]) dest).length) {
                        for (int i = srcPos; i < srcPos + length; i++) {
                            logArrayAcc(locId, src, i, ((boolean[]) src)[i], false);
                        }
                        for (int i = destPos; i < destPos + length; i++) {
                            logArrayAcc(locId, dest, i, ((boolean[]) src)[i - destPos + srcPos], true);
                        }
                    }
                }
            } else if (src instanceof byte[]) {
                if (dest instanceof byte[]) {
                    if (srcPos + length <= ((byte[]) src).length
                            && destPos + length <= ((byte[]) dest).length) {
                        for (int i = srcPos; i < srcPos + length; i++) {
                            logArrayAcc(locId, src, i, ((byte[]) src)[i], false);
                        }
                        for (int i = destPos; i < destPos + length; i++) {
                            logArrayAcc(locId, dest, i, ((byte[]) src)[i - destPos + srcPos], true);
                        }
                    }
                }
            } else if (src instanceof char[]) {
                if (dest instanceof char[]) {
                    if (srcPos + length <= ((char[]) src).length
                            && destPos + length <= ((char[]) dest).length) {
                        for (int i = srcPos; i < srcPos + length; i++) {
                            logArrayAcc(locId, src, i, ((char[]) src)[i], false);
                        }
                        for (int i = destPos; i < destPos + length; i++) {
                            logArrayAcc(locId, dest, i, ((char[]) src)[i - destPos + srcPos], true);
                        }
                    }
                }
            } else if (src instanceof short[]) {
                if (dest instanceof short[]) {
                    if (srcPos + length <= ((short[]) src).length
                            && destPos + length <= ((short[]) dest).length) {
                        for (int i = srcPos; i < srcPos + length; i++) {
                            logArrayAcc(locId, src, i, ((short[]) src)[i], false);
                        }
                        for (int i = destPos; i < destPos + length; i++) {
                            logArrayAcc(locId, dest, i, ((short[]) src)[i - destPos + srcPos], true);
                        }
                    }
                }
            } else if (dest instanceof int[]) {
                if (srcPos + length <= ((int[]) src).length
                        && destPos + length <= ((int[]) dest).length) {
                    for (int i = srcPos; i < srcPos + length; i++) {
                        logArrayAcc(locId, src, i, ((int[]) src)[i], false);
                    }
                    for (int i = destPos; i < destPos + length; i++) {
                        logArrayAcc(locId, dest, i, ((int[]) src)[i - destPos + srcPos], true);
                    }
                }
            } else if (src instanceof long[]) {
                if (dest instanceof long[]) {
                    if (srcPos + length <= ((long[]) src).length
                            && destPos + length <= ((long[]) dest).length) {
                        for (int i = srcPos; i < srcPos + length; i++) {
                            logArrayAcc(locId, src, i, ((long[]) src)[i], false);
                        }
                        for (int i = destPos; i < destPos + length; i++) {
                            logArrayAcc(locId, dest, i, ((long[]) src)[i - destPos + srcPos], true);
                        }
                    }
                }
            } else if (src instanceof float[]) {
                if (dest instanceof float[]) {
                    if (srcPos + length <= ((float[]) src).length
                            && destPos + length <= ((float[]) dest).length) {
                        for (int i = srcPos; i < srcPos + length; i++) {
                            logArrayAcc(locId, src, i, ((float[]) src)[i], false);
                        }
                        for (int i = destPos; i < destPos + length; i++) {
                            logArrayAcc(locId, dest, i, ((float[]) src)[i - destPos + srcPos], true);
                        }
                    }
                }
            } else if (src instanceof double[]) {
                if (dest instanceof double[]) {
                    if (srcPos + length <= ((double[]) src).length
                            && destPos + length <= ((double[]) dest).length) {
                        for (int i = srcPos; i < srcPos + length; i++) {
                            logArrayAcc(locId, src, i, ((double[]) src)[i], false);
                        }
                        for (int i = destPos; i < destPos + length; i++) {
                            logArrayAcc(locId, dest, i, ((double[]) src)[i - destPos + srcPos], true);
                        }
                    }
                }
            }
        }

        System.arraycopy(src, srcPos, dest, destPos, length);
    }

    private static long calcMonitorId(Object obj) {
        // Use low 32bit for object hash and high 32bit for the magic constant.
        return (MONITOR_C << 32L) + System.identityHashCode(obj);
    }

    /**
     * Calculates the identifier of the imaginary lock guarding access to
     * {@code AtomicX} variable.
     * <p>
     * This method is used for mocking {@code AtomicX} classes.
     *
     * @param atomicVar
     *            the atomic variable
     * @return the imaginary lock identifier
     */
    private static long calcAtomicLockId(Object atomicVar) {
        // Use low 32bit for object hash and high 32bit for the magic constant.
        return (ATOMIC_LOCK_C << 32L) + System.identityHashCode(atomicVar);
    }

    private static EventType getLockEventType(Lock lock) {
        return readLockToRWLock.containsKey(lock) ? EventType.READ_LOCK : EventType.WRITE_LOCK;
    }

    private static EventType getUnlockEventType(Lock lock) {
        return readLockToRWLock.containsKey(lock) ? EventType.READ_UNLOCK : EventType.WRITE_UNLOCK;
    }

    private static long calcLockId(Lock lock) {
        if (readLockToRWLock.containsKey(lock)) {
            /* get the associated ReadWriteLock for read lock */
            return System.identityHashCode(readLockToRWLock.get(lock));
        } else if (writeLockToRWLock.containsKey(lock)) {
            /* get the associated ReadWriteLock for write lock */
            return System.identityHashCode(writeLockToRWLock.get(lock));
        } else {
            /* normal lock */
            return System.identityHashCode(lock);
        }
    }

    /**
     * Logs events produced by blocking methods being interrupted. In
     * particular, this means that 1) the interrupted status of the current
     * thread has to be true and 2) the interrupted status must then be cleared.
     *
     * @param locId
     *            the location ID
     */
    private static void onBlockingMethodInterrupted(int locId) {
        Thread crntThread = Thread.currentThread();
        /* require interrupted status to be true at the moment */
        db.saveEvent(EventType.READ, locId, System.identityHashCode(crntThread),
                -NATIVE_INTERRUPTED_STATUS_VAR_ID, 1);
        /* clear interrupted status */
        db.saveEvent(EventType.WRITE, locId, System.identityHashCode(crntThread),
                -NATIVE_INTERRUPTED_STATUS_VAR_ID, 0);
    }

    private static void onBlockingMethodNormalReturn(int locId) {
        /* YilongL: it's possible that another thread interrupts this thread and
         * logs the write of interrupted status to 1 before this read. Thus, the
         * logged global trace could violate read-write consistency on the
         * imaginary interrupted status field */
        db.saveEvent(EventType.READ, locId, System.identityHashCode(Thread.currentThread()),
                -NATIVE_INTERRUPTED_STATUS_VAR_ID, 0);
    }

    private static boolean isPrimitiveWrapper(Object o) {
        /* YilongL: we do not use guava's `Primitives.isWrapperType' because o
         * could be null */
        return o instanceof Integer || o instanceof Long || o instanceof Byte
                || o instanceof Boolean || o instanceof Float || o instanceof Double
                || o instanceof Short || o instanceof Character;
    }

    private static long objectToLong(Object o) {
        if (o instanceof Boolean) return ((Boolean) o).booleanValue() ? 1 : 0;
        if (o instanceof Byte) return (Byte) o;
        if (o instanceof Character) return ((Character) o);
        if (o instanceof Short) return (Short) o;
        if (o instanceof Integer) return (Integer) o;
        if (o instanceof Long) return (Long) o;
        if (o instanceof Float) return Float.floatToRawIntBits((Float) o);
        if (o instanceof Double) return Double.doubleToRawLongBits((Double) o);
        return System.identityHashCode(o);
    }

    /**
     * TODO(YilongL): doing name mangling at runtime introduce unnecessary
     * dependency on ConcurrentHashMap and Collections.newSetFromMap
     */
    private static int resolveVariableId(int variableId) {
        String varSig = MetaData.varSigs[variableId];
        int idx = varSig.lastIndexOf(".");
        String className = varSig.substring(0, idx);
        String fieldName = varSig.substring(idx + 1);
        Set<String> fieldNames = MetaData.classNameToFieldNames.get(className);
        while (fieldNames != null && !fieldNames.contains(fieldName)) {
            className = MetaData.classNameToSuperclassName.get(className);
            if (className == null) {
                fieldNames = null;
                break;
            }

            fieldNames = MetaData.classNameToFieldNames.get(className);
        }

        if (fieldNames == null) {
            /* failed to resolve this variable Id */
            // TODO(YilongL): make sure this doesn't happen

            // System.out.println("[Warning]: unable to retrieve field information of class "
            // + className + "; resolving field " + fieldName);

            return variableId;
        } else {
            assert fieldNames.contains(fieldName);
            return MetaData.getVariableId(className, fieldName);
        }
    }

}
