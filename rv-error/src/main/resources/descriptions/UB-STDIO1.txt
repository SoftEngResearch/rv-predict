According to ISO C11, it is undefined behavior if an argument passed to a format action for fprintf, printf, etc. is of a type different than that specified by the standard. In practice this can lead to incorrect data printed or even invalid memory accesses, depending on the platform and the implementation of the format functions. Common cases where this constraint is violated include passing a signed value to the %x conversion, or a pointer other than a pointer to void to the %p specifier. However, any type mismatch between the type of the argument and the type specified by the standard constitutes undefined behavior. The solution is to always convert the argument to the necessary type prior to passing it to the function.
