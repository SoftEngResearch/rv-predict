According to ISO C11, it is undefined behavior to call the exit function more than once. This occurs when the program has registered a function to call at program termination via the atexit function, and the function thus registered calls exit again. It can occur both if the exit function is called explicitly, or if the exit function is called implicitly by returning from the main function. In practice, on some platforms this is benign, however, on others, infinite recursion can occur, eating up all the memory on the device and potentially interfering with the execution of other processes on the system before terminating abnormally. The solution is to avoid calling exit within any function called directly or indirectly by a termination handler. If such code must exist during normal execution, a flag can be set prior to calling exit which triggers alternative behavior in the registered function.
