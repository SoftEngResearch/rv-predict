According to ISO C11, it is undefined behavior to dereference a pointer which points before the beginning of an array object, or one orf more bytes past the end of it. It is worth noting that the definition of "array object" in this case includes both scalars, which are treated in this context identically to an array of length 1, and struct and union fields, which are treated as objects in their own right and therefore identically to an object of the same type which is not a subobject of a struct or union. Thus it is undefined behavior to address a struct field, convert to a character pointer, and increment the value of the pointer to one past the end of the field, then dereference it. If you wish to do this, you must first obtain a pointer to the entire struct either by addressing the struct itself, or by converting a pointer to the initial byte of the struct to a pointer to the struct type. Note that this rule in particular applies only to dereferencing the pointer; it is still well-defined to construct a pointer value one past the end of the array as long as that value is not dereferenced. However, constructing a pointer before the beginning of the array object or more than one past the end is still undefined even if no dereferencing occurs. In general, the solution is to always be aware of the size of the arrfay object which was addressed to create the pointer and avoid dereferencing pointer values outside the range of allowed addresses.
