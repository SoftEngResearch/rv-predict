According to ISO C11, it is undefined behavior to specify the '0' conversion flag to a format action for fprintf, printf, etc. unless the converfsion specifier is one of 'd', 'i', 'o', 'u', 'x', 'X', 'a', 'A', 'e', 'E', 'f', 'F', 'g', or 'G'. In practice this can be a compiler warning if the compiler can infer the format string statically, but it can also lead to non-portable behavior at runtime, and because it is undefined behavior, some compilers may emit no warning. Many library implementations will simply ignore the invalid flag, but relying on this behavior is unsafe and another library implementation could crash in this case with an error. The solution is to either remove the invalid conversion flag, or change the conversion specifier to one of the specifiers for which the flag is allowed.
