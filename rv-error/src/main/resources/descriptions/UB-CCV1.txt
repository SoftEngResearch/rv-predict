According to ISO C11, if the mathematical value of an arithmetic expression producing a signed result can not be represented in the result type, the behavior is undefined. In practice, this error can cause buffer overflow vulnerabilities. Because it is allowed for the minimum value in a signed type to have a greater absolute value than the maximum value, it is also possible for a prefix negation or a division (by -1) to produce an integer overflow. Code must be written in order to ensure that the value of arithmetic expressions cannot overflow based on the range of possible values for the variable and the range of values for the type of the result of the expression.

