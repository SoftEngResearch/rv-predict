According to ISO C11, it is implementation-defined behavior to convert an integer to a signed integer type which cannot represent the value of the integer. This occurs when a explicit cast or implicit conversion from one type to another (e.g. via an assignment expression or initialization) causes a conversion from one integer type to another. It is distinct from an integer overflow in that an overflow represents an arithmetic expression whose value is not representable in the resulting type, whereas a conversion does not perform an arithmetic operation and merely converts a value from one type to another. In practice, as implementation-defined behavior, the platform is required to document the behavior that occurs in this case. It can either return an implementation defined integer value, or an implementation defined signal can be raised, potentially leading to abnormal program termination. However, which behavior results is determined by the platform. The solution is to either rely on the behavior of the platform, or, if the program should be strictly conforming, to ensure that no conversions take place which require a value to be represented in a type which cannot contain it.
