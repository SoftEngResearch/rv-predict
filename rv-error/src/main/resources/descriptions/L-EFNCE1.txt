The C11 standard does not explicitly provide for information about stack overflow, thus it is not undefined behavior per se. However, it can lead to abnormal program termination, and therefore it is generally desirable to avoid overflowing the stack. Because the size of each stack frame depends on the internals of the compiler, kcc does not reason using the actual size of each stack frame, but merely estimates their size conservatively based on the total size of all local variables in the stack frame, plus a fixed value per stack frame storing the return address, etc. kcc estimates that your program may potentially utilize more stack space than was provided via the -fstack-size option, however, it is probably desirable to reason more explicitly about the actual stack sizes to verify whether this will be a problem on your platform.
