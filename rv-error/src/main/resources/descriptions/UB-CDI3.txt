According to ISO C11, it is undefined behavior if an initializer for an object of array type is not either a compatible string literal, or a brace enclosed initializer list. It is also undefined behavior if an initializer for an object of struct or union type is not either a compatible struct or union value, or a brace enclosed initializer list. In practice this is usually a compiler error, preventing your application from being built; however, since it is undefined behavior, it is not strictly required by the C standard that a diagniostic be emitted for this case, and therefore it is possible that some C compilers will accept such programs and emit some kind of undesirable code. This should only occur if either the type of the object or its initializer have been written incorrectly; therefore, the solution is to fix one or both so that they accurately specify the intended type and initial value of the object.
