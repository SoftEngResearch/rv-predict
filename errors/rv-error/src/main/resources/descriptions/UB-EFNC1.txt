According to ISO C11, It is undefined behavior to call a function via a function pointer if the type of the function is not compatible with the type of the pointer. This can occur when function pointers are converted to another type, e.g. through a void pointer. In practice this could lead to buffer overflow vulnerabilities and stack corruption because the instructions executed to call the function would be incompatible with the calling convention of the function being called. The solution is to always track the type of function pointers even when converted to another type, and ensure that they are not called via a value of an incompatible type to the function pointed to.
