According to ISO C11, it is undefined to perform a bitwise shift with a second operand greater than or equal to the bit width of the first operand. The behavior of such a shift operation is architecture specific and depends on the code generated for the shift expression, and is therefore not portable and may trigger incorrect behavior on some platforms. Because a bitshift of such a width would generate a constant value regardless of the first operand, it is generally not necessary to write such code, and the presence of such an error generally indicates a logic error in the computation of the value of the second operand; however, in the case where such a trivial shift operation is in fact desired, the solution is to check whether the second operand is greater than or equal to the bit width of the first operand, and if it is, perform two successive shifts whose widths sum to the bit width of the first operand.
