According to ISO C11, conversion from a floating type to an integer type results in the integral part of the float with the fractional part truncated. However, if the truncated mathematical value cannot be represented in the resulting integer type, the behavior is undefined. In practice this can have similar consequences to an integer or floating point overflow, in which the resulting value of the variable is not as expected, and therefore a buffer overflow vulnerability can occur if the value is used to compute a memory address. The solution is to ensure that values of floating point numbers that are converted to integers are always within the bounds of the resulting integer type, either based on their range of possible values, or by explicitly checking prior to the conversion.
