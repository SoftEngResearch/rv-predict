According to ISO C11, if a floating point value is converted to another floating type, and the mathematical value of the float is greater than the maximum positive value for the resulting type, or less than the minimum negative value for the resulting type, the behavior is undefined. In practice this has similar consequences to a floating-point overflow, and can lead to propagating arithmetic errors throughout any floating-point computation that uses the result value of the conversion. On systems supporting IEEE 754 arithmetic, the result of such a conversion is either a positive or negative infinite value, or else SIGFPE is raised. Thus, depending on how the floating point exceptions are configured in your application, and depending on your signal handler's behavior, this error can also lead to abnormal program termination. In general, code must be written in order to ensure that the value of arithmetic expressions cannot overflow based on the range of possible values for the variable and the range of values for the type of the result of the expression.
