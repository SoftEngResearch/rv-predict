According to ISO C11, it is undefined behavior to compute a pointer value which is less than the beginning of an array object, or more than one byte past the end of it. It is worth noting that the definition of "array object" in this case includes both scalars, which are treated in this context identically to an array of length 1, and struct and union fields, which are treated as objects in their own right and therefore identically to an object of the same type which is not a subobject of a struct or union. Thus it is undefined behavior to address a struct field, convert to a character pointer, and increment the value of the pointer more than one past the end of the field. If you wish to do this, you must first obtain a pointer to the entire struct either by addressing the struct itself, or by converting a pointer to the initial byte of the struct to a pointer to the struct type. Note that these rules apply regardless of whether the pointer is ever dereferenced; it is the act of constructing such a pointer value itself which is undefined. In general, the solution is to always be aware of the size of the array object which was addressed to create the pointer and avoid constructing pointer values outside the range of allowed addresses.
