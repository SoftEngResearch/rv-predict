According to ISO C11, it is undefined behavior to return normally from a function marked _Noreturn. In other words, such a function is required to either not terminate, or terminate abnormally via some mechanism which overrides the normal process of function return (i.e., longjmp, exit, quick_exit, abort, etc.). In practice this may lead to incorrect and inconsistent program state if the function does return. If the program is being optimized to make code size as small as possible, the function may not even have a return instruction, in which case falling off the end of the code block of the function could lead to execution of code not meant to be executed, which could lead to abnormal program termination or control flow corruption. The solution if the function is intended to be capable of return is to avoid using the _Noreturn specifier. The solution if the function is intended to not ever return is to determine which code paths lead to a return statement or falling off the end of the function block, and making those code paths infeasible.
