According to ISO C11, most accesses to objects have an effective type. The standard provides certain rules for which types of lvalues are allowed to perform accesses with which effective types. You are encouraged to read up on this in the citations below. If these rules are violated, the compiler's assumptions about which pointers can alias (ie, point to the same object as each other) are violated, which can lead to incorrect and inconsistent program state. The solution is to ensure that all accesses to objects have an effective type compatible with the type of the lvalue performing the access according to the strict aliasing rules defined in the standard. On some compilers, it may also be possible to disable strict aliasing as an optimization, which may be necessary as some memory access patterns are not allowed under strict aliasing.
