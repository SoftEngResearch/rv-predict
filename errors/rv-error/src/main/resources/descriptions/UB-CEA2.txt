According to ISO C11, if a pointer difference expression would generate a mathematical value outside the range of values that can be represented by the type ptrdiff_t, the behavior is undefined. ptrdiff_t is an implementation defined signed integer type. Because computing the pointer difference of two separate objects is undefined, this error can only prevent a program from being well defined if a single object has a greater size than the maximum value of ptrdiff_t, which can only occur if either the object takes up over half of the address space, or ptrdiff_t is a smaller type than the size of a pointer. While this cannot occur on all platforms, when it does occur, its implications are similar to an out of bounds conversion, and it can lead to buffer overflow vulnerabilities. The solution is that care must be taken to avoid pointer difference operations on very large objects on some platforms.
