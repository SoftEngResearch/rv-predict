According to ISO C11, it is undefined behavior to call free on a pointer which does not point to the first byte of a currently allocated region of memory allocated with one of the allocation functions, e.g. malloc. This is the classic double free vulnerability. In practice doing so can corrupt your free lists, leading to memory corruption in the heap and potentially resulting in security vulnerabilities or abnormal program termination. The correct solution is to only call free on a pointer to the first byte of an object of allocated storage during that object's lifetime (i.e., before another call to realloc or free on the same pointer).
