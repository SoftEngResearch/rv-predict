public class account.Account extends java.lang.Object
{
    double amount;
    java.lang.String name;

    public void <init>(java.lang.String, double)
    {
        account.Account r0;
        java.lang.String r1;
        double d0;

        r0 := @this: account.Account;
        r1 := @parameter0: java.lang.String;
        d0 := @parameter1: double;
        staticinvoke <rvpredict.logging.RT: void logMethodBegin(java.lang.String,java.lang.String)>("account.Account", "void <init>(java.lang.String,double)");
        staticinvoke <rvpredict.logging.RT: void logConstructorBegin(java.lang.String,java.lang.String,java.lang.String,java.lang.String,int)>("java.lang.Object", "void <init>()", "account.Account", 5, 5);
        specialinvoke r0.<java.lang.Object: void <init>()>();
        staticinvoke <rvpredict.logging.RT: void logConstructorEnd(java.lang.Object,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int)>(r0, "java.lang.Object", "void <init>()", "account.Account", 5, 5);
        r0.<account.Account: double amount> = d0;
        staticinvoke <rvpredict.logging.RT: void logFieldAcc(java.lang.String,java.lang.String,java.lang.Object,java.lang.String,java.lang.String,int,boolean)>("account.Account", "amount", r0, "account.Account", "void <init>(java.lang.String,double)", 7, 1);
        r0.<account.Account: java.lang.String name> = r1;
        staticinvoke <rvpredict.logging.RT: void logFieldAcc(java.lang.String,java.lang.String,java.lang.Object,java.lang.String,java.lang.String,int,boolean)>("account.Account", "name", r0, "account.Account", "void <init>(java.lang.String,double)", 9, 1);
        staticinvoke <rvpredict.logging.RT: void logMethodEnd(java.lang.String,java.lang.String)>("account.Account", "void <init>(java.lang.String,double)");
        return;
    }

    synchronized void depsite(double)
    {
        account.Account r0;
        double d0, $d1, $d2;

        r0 := @this: account.Account;
        d0 := @parameter0: double;
        staticinvoke <rvpredict.logging.RT: void logLock(java.lang.Object)>(r0);
        staticinvoke <rvpredict.logging.RT: void logMethodBegin(java.lang.String,java.lang.String)>("account.Account", "void depsite(double)");
        $d1 = r0.<account.Account: double amount>;
        staticinvoke <rvpredict.logging.RT: void logFieldAcc(java.lang.String,java.lang.String,java.lang.Object,java.lang.String,java.lang.String,int,boolean)>("account.Account", "amount", r0, "account.Account", "void depsite(double)", 4, 0);
        $d2 = $d1 + d0;
        r0.<account.Account: double amount> = $d2;
        staticinvoke <rvpredict.logging.RT: void logFieldAcc(java.lang.String,java.lang.String,java.lang.Object,java.lang.String,java.lang.String,int,boolean)>("account.Account", "amount", r0, "account.Account", "void depsite(double)", 7, 1);
        staticinvoke <rvpredict.logging.RT: void logMethodEnd(java.lang.String,java.lang.String)>("account.Account", "void depsite(double)");
        staticinvoke <rvpredict.logging.RT: void logUnlock(java.lang.Object)>(r0);
        return;
    }

    synchronized void withdraw(int)
    {
        account.Account r0;
        int i0;
        double $d0, $d1, $d2;

        r0 := @this: account.Account;
        i0 := @parameter0: int;
        staticinvoke <rvpredict.logging.RT: void logLock(java.lang.Object)>(r0);
        staticinvoke <rvpredict.logging.RT: void logMethodBegin(java.lang.String,java.lang.String)>("account.Account", "void withdraw(int)");
        $d0 = r0.<account.Account: double amount>;
        staticinvoke <rvpredict.logging.RT: void logFieldAcc(java.lang.String,java.lang.String,java.lang.Object,java.lang.String,java.lang.String,int,boolean)>("account.Account", "amount", r0, "account.Account", "void withdraw(int)", 4, 0);
        $d1 = (double) i0;
        $d2 = $d0 + $d1;
        r0.<account.Account: double amount> = $d2;
        staticinvoke <rvpredict.logging.RT: void logFieldAcc(java.lang.String,java.lang.String,java.lang.Object,java.lang.String,java.lang.String,int,boolean)>("account.Account", "amount", r0, "account.Account", "void withdraw(int)", 8, 1);
        staticinvoke <rvpredict.logging.RT: void logMethodEnd(java.lang.String,java.lang.String)>("account.Account", "void withdraw(int)");
        staticinvoke <rvpredict.logging.RT: void logUnlock(java.lang.Object)>(r0);
        return;
    }

    synchronized void transfer(account.Account, double)
    {
        account.Account r0, r1;
        double d0, $d1, $d2, $d3, $d4;

        r0 := @this: account.Account;
        r1 := @parameter0: account.Account;
        d0 := @parameter1: double;
        staticinvoke <rvpredict.logging.RT: void logLock(java.lang.Object)>(r0);
        staticinvoke <rvpredict.logging.RT: void logMethodBegin(java.lang.String,java.lang.String)>("account.Account", "void transfer(account.Account,double)");
        $d1 = r0.<account.Account: double amount>;
        staticinvoke <rvpredict.logging.RT: void logFieldAcc(java.lang.String,java.lang.String,java.lang.Object,java.lang.String,java.lang.String,int,boolean)>("account.Account", "amount", r0, "account.Account", "void transfer(account.Account,double)", 5, 0);
        $d2 = $d1 - d0;
        r0.<account.Account: double amount> = $d2;
        staticinvoke <rvpredict.logging.RT: void logFieldAcc(java.lang.String,java.lang.String,java.lang.Object,java.lang.String,java.lang.String,int,boolean)>("account.Account", "amount", r0, "account.Account", "void transfer(account.Account,double)", 8, 1);
        $d3 = r1.<account.Account: double amount>;
        staticinvoke <rvpredict.logging.RT: void logFieldAcc(java.lang.String,java.lang.String,java.lang.Object,java.lang.String,java.lang.String,int,boolean)>("account.Account", "amount", r1, "account.Account", "void transfer(account.Account,double)", 10, 0);
        $d4 = $d3 + d0;
        r1.<account.Account: double amount> = $d4;
        staticinvoke <rvpredict.logging.RT: void logFieldAcc(java.lang.String,java.lang.String,java.lang.Object,java.lang.String,java.lang.String,int,boolean)>("account.Account", "amount", r1, "account.Account", "void transfer(account.Account,double)", 13, 1);
        staticinvoke <rvpredict.logging.RT: void logMethodEnd(java.lang.String,java.lang.String)>("account.Account", "void transfer(account.Account,double)");
        staticinvoke <rvpredict.logging.RT: void logUnlock(java.lang.Object)>(r0);
        return;
    }

    synchronized void print()
    {
        account.Account r0;
        java.io.PrintStream $r1;
        java.lang.StringBuilder $r2, $r5, $r6;
        java.lang.String $r3, $r4, $r7;
        double $d0;

        r0 := @this: account.Account;
        staticinvoke <rvpredict.logging.RT: void logLock(java.lang.Object)>(r0);
        staticinvoke <rvpredict.logging.RT: void logMethodBegin(java.lang.String,java.lang.String)>("account.Account", "void print()");
        $r1 = <java.lang.System: java.io.PrintStream out>;
        staticinvoke <rvpredict.logging.RT: void logFieldAcc(java.lang.String,java.lang.String,java.lang.Object,java.lang.String,java.lang.String,int,boolean)>("java.lang.System", "out", null, "account.Account", "void print()", 3, 0);
        $r2 = new java.lang.StringBuilder;
        $r3 = r0.<account.Account: java.lang.String name>;
        staticinvoke <rvpredict.logging.RT: void logFieldAcc(java.lang.String,java.lang.String,java.lang.Object,java.lang.String,java.lang.String,int,boolean)>("account.Account", "name", r0, "account.Account", "void print()", 6, 0);
        staticinvoke <rvpredict.logging.RT: void logInvokeBegin(java.lang.String,java.lang.String,java.lang.String,java.lang.String,int)>("java.lang.String", "java.lang.String valueOf(java.lang.Object)", "account.Account", 9, 9);
        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r3);
        staticinvoke <rvpredict.logging.RT: void logConstructorBegin(java.lang.String,java.lang.String,java.lang.String,java.lang.String,int)>("java.lang.StringBuilder", "void <init>(java.lang.String)", "account.Account", 11, 11);
        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>($r4);
        staticinvoke <rvpredict.logging.RT: void logConstructorEnd(java.lang.Object,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int)>($r2, "java.lang.StringBuilder", "void <init>(java.lang.String)", "account.Account", 11, 11);
        staticinvoke <rvpredict.logging.RT: void logInstanceInvokeBegin(java.lang.Object,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int)>($r2, "java.lang.StringBuilder", "java.lang.StringBuilder append(java.lang.String)", "account.Account", 14, 14);
        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("--");
        $d0 = r0.<account.Account: double amount>;
        staticinvoke <rvpredict.logging.RT: void logFieldAcc(java.lang.String,java.lang.String,java.lang.Object,java.lang.String,java.lang.String,int,boolean)>("account.Account", "amount", r0, "account.Account", "void print()", 15, 0);
        staticinvoke <rvpredict.logging.RT: void logInstanceInvokeBegin(java.lang.Object,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int)>($r5, "java.lang.StringBuilder", "java.lang.StringBuilder append(double)", "account.Account", 18, 18);
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0);
        staticinvoke <rvpredict.logging.RT: void logInstanceInvokeBegin(java.lang.Object,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int)>($r6, "java.lang.StringBuilder", "java.lang.String toString()", "account.Account", 20, 20);
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r7);
        staticinvoke <rvpredict.logging.RT: void logImpureCall(java.lang.String,boolean,java.lang.Object,java.lang.String,java.lang.String,int)>("java.io.PrintStream", 1, $r1, "account.Account", 21, 21);
        staticinvoke <rvpredict.logging.RT: void logMethodEnd(java.lang.String,java.lang.String)>("account.Account", "void print()");
        staticinvoke <rvpredict.logging.RT: void logUnlock(java.lang.Object)>(r0);
        return;
    }
}
