public class stringbuffer.StringBufferTest extends java.lang.Thread
{
    stringbuffer.StringBuffer al1;
    stringbuffer.StringBuffer al2;
    int choice;

    public void <init>(stringbuffer.StringBuffer, stringbuffer.StringBuffer, int)
    {
        stringbuffer.StringBufferTest r0;
        stringbuffer.StringBuffer r1, r2;
        int i0;

        r0 := @this: stringbuffer.StringBufferTest;
        r1 := @parameter0: stringbuffer.StringBuffer;
        r2 := @parameter1: stringbuffer.StringBuffer;
        i0 := @parameter2: int;
        specialinvoke r0.<java.lang.Thread: void <init>()>();
        staticinvoke <rvpredict.logging.ReplayRT: void logFieldAcc()>();
        r0.<stringbuffer.StringBufferTest: stringbuffer.StringBuffer al1> = r1;
        staticinvoke <rvpredict.logging.ReplayRT: void logFieldAcc()>();
        r0.<stringbuffer.StringBufferTest: stringbuffer.StringBuffer al2> = r2;
        staticinvoke <rvpredict.logging.ReplayRT: void logFieldAcc()>();
        r0.<stringbuffer.StringBufferTest: int choice> = i0;
        return;
    }

    public void run()
    {
        stringbuffer.StringBufferTest r0;
        java.io.PrintStream $r1;
        int $i0, $i1;
        stringbuffer.StringBuffer $r2, $r3, $r5, $r6;

        r0 := @this: stringbuffer.StringBufferTest;
        staticinvoke <rvpredict.logging.ReplayRT: void logFieldAcc()>();
        $r1 = <java.lang.System: java.io.PrintStream out>;
        virtualinvoke $r1.<java.io.PrintStream: void flush()>();
        $i0 = r0.<stringbuffer.StringBufferTest: int choice>;
        tableswitch($i0)
        {
            case 0: goto label0;
            default: goto label2;
        };

     label0:
        staticinvoke <rvpredict.logging.ReplayRT: void logFieldAcc()>();
        $r2 = r0.<stringbuffer.StringBufferTest: stringbuffer.StringBuffer al1>;
        staticinvoke <rvpredict.logging.ReplayRT: void logFieldAcc()>();
        $r3 = r0.<stringbuffer.StringBufferTest: stringbuffer.StringBuffer al2>;
        staticinvoke <rvpredict.logging.ReplayRT: void logStaticSyncLock()>();
        virtualinvoke $r2.<stringbuffer.StringBuffer: stringbuffer.StringBuffer append(stringbuffer.StringBuffer)>($r3);
        staticinvoke <rvpredict.logging.ReplayRT: void logStaticSyncUnlock()>();
        goto label2;

     label1:
        staticinvoke <rvpredict.logging.ReplayRT: void logFieldAcc()>();
        $r5 = r0.<stringbuffer.StringBufferTest: stringbuffer.StringBuffer al1>;
        staticinvoke <rvpredict.logging.ReplayRT: void logFieldAcc()>();
        $r6 = r0.<stringbuffer.StringBufferTest: stringbuffer.StringBuffer al1>;
        $i1 = virtualinvoke $r6.<stringbuffer.StringBuffer: int length()>();
        staticinvoke <rvpredict.logging.ReplayRT: void logStaticSyncLock()>();
        virtualinvoke $r5.<stringbuffer.StringBuffer: stringbuffer.StringBuffer delete(int,int)>(0, $i1);
        staticinvoke <rvpredict.logging.ReplayRT: void logStaticSyncUnlock()>();

     label2:
        return;
    }

    public static void main(java.lang.String[])
    {
        java.lang.String[] r0;
        stringbuffer.StringBuffer $r1, r2, r3, $r4;
        stringbuffer.StringBufferTest $r5, $r6;

        r0 := @parameter0: java.lang.String[];
        $r1 = new stringbuffer.StringBuffer;
        specialinvoke $r1.<stringbuffer.StringBuffer: void <init>(java.lang.String)>("Hello");
        r2 = $r1;
        $r4 = new stringbuffer.StringBuffer;
        specialinvoke $r4.<stringbuffer.StringBuffer: void <init>(java.lang.String)>("World");
        r3 = $r4;
        $r5 = new stringbuffer.StringBufferTest;
        specialinvoke $r5.<stringbuffer.StringBufferTest: void <init>(stringbuffer.StringBuffer,stringbuffer.StringBuffer,int)>(r2, r3, 0);
        staticinvoke <rvpredict.logging.ReplayRT: void logStart(java.lang.Object)>($r5);
        virtualinvoke $r5.<stringbuffer.StringBufferTest: void start()>();
        $r6 = new stringbuffer.StringBufferTest;
        specialinvoke $r6.<stringbuffer.StringBufferTest: void <init>(stringbuffer.StringBuffer,stringbuffer.StringBuffer,int)>(r3, r2, 1);
        staticinvoke <rvpredict.logging.ReplayRT: void logStart(java.lang.Object)>($r6);
        virtualinvoke $r6.<stringbuffer.StringBufferTest: void start()>();
        return;
    }
}
