public class emp.Simple extends java.lang.Object
{
    static int x;

    static void <clinit>()
    {
        staticinvoke <rvpredict.logging.ReplayRT: void logFieldAcc()>();
        <emp.Simple: int x> = 0;
        return;
    }

    public void <init>()
    {
        emp.Simple r0;

        r0 := @this: emp.Simple;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    public static void main(java.lang.String[])
    {
        java.lang.String[] r0;
        emp.Simple$MyThread $r1, r2, r3, $r4;
        java.io.PrintStream $r5;
        int $i0;
        java.lang.Exception $r6, r7;

        r0 := @parameter0: java.lang.String[];

     label0:
        $r1 = new emp.Simple$MyThread;
        specialinvoke $r1.<emp.Simple$MyThread: void <init>()>();
        r2 = $r1;
        $r4 = new emp.Simple$MyThread;
        specialinvoke $r4.<emp.Simple$MyThread: void <init>()>();
        r3 = $r4;
        staticinvoke <rvpredict.logging.ReplayRT: void logStart()>();
        virtualinvoke r2.<emp.Simple$MyThread: void start()>();
        staticinvoke <rvpredict.logging.ReplayRT: void logStart()>();
        virtualinvoke r3.<emp.Simple$MyThread: void start()>();
        staticinvoke <rvpredict.logging.ReplayRT: void logJoin()>();
        virtualinvoke r2.<emp.Simple$MyThread: void join()>();
        staticinvoke <rvpredict.logging.ReplayRT: void logJoin()>();
        virtualinvoke r3.<emp.Simple$MyThread: void join()>();
        staticinvoke <rvpredict.logging.ReplayRT: void logFieldAcc()>();
        $r5 = <java.lang.System: java.io.PrintStream out>;
        staticinvoke <rvpredict.logging.ReplayRT: void logFieldAcc()>();
        $i0 = <emp.Simple: int x>;
        virtualinvoke $r5.<java.io.PrintStream: void println(int)>($i0);

     label1:
        goto label3;

     label2:
        $r6 := @caughtexception;
        r7 = $r6;
        virtualinvoke r7.<java.lang.Exception: void printStackTrace()>();

     label3:
        return;

        catch java.lang.Exception from label0 to label1 with label2;
    }
}
