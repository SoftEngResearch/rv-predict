class emp.Example$MyThread extends java.lang.Thread
{
    int id;
    emp.Example t;

    void <init>(emp.Example, int)
    {
        emp.Example$MyThread r0;
        emp.Example r1;
        int i0;

        r0 := @this: emp.Example$MyThread;
        r1 := @parameter0: emp.Example;
        i0 := @parameter1: int;
        specialinvoke r0.<java.lang.Thread: void <init>()>();
        r0.<emp.Example$MyThread: emp.Example t> = r1;
        r0.<emp.Example$MyThread: int id> = i0;
        return;
    }

    private void inc()
    {
        emp.Example$MyThread r0;
        emp.Example $r1, $r2;
        int $i0, $i1, $i2;

        r0 := @this: emp.Example$MyThread;
        staticinvoke <rvpredict.logging.ReplayRT: void logFieldAcc()>();
        $r1 = r0.<emp.Example$MyThread: emp.Example t>;
        staticinvoke <rvpredict.logging.ReplayRT: void logFieldAcc()>();
        $r2 = r0.<emp.Example$MyThread: emp.Example t>;
        staticinvoke <rvpredict.logging.ReplayRT: void logFieldAcc()>();
        $i0 = $r2.<emp.Example: int x>;
        staticinvoke <rvpredict.logging.ReplayRT: void logFieldAcc()>();
        $i1 = r0.<emp.Example$MyThread: int id>;
        $i2 = $i0 + $i1;
        staticinvoke <rvpredict.logging.ReplayRT: void logFieldAcc()>();
        $r1.<emp.Example: int x> = $i2;
        return;
    }

    private void dec()
    {
        emp.Example$MyThread r0;
        emp.Example $r1, $r2;
        int $i0, $i1, $i2;

        r0 := @this: emp.Example$MyThread;
        staticinvoke <rvpredict.logging.ReplayRT: void logFieldAcc()>();
        $r1 = r0.<emp.Example$MyThread: emp.Example t>;
        staticinvoke <rvpredict.logging.ReplayRT: void logFieldAcc()>();
        $r2 = r0.<emp.Example$MyThread: emp.Example t>;
        staticinvoke <rvpredict.logging.ReplayRT: void logFieldAcc()>();
        $i0 = $r2.<emp.Example: int x>;
        staticinvoke <rvpredict.logging.ReplayRT: void logFieldAcc()>();
        $i1 = r0.<emp.Example$MyThread: int id>;
        $i2 = $i0 - $i1;
        staticinvoke <rvpredict.logging.ReplayRT: void logFieldAcc()>();
        $r1.<emp.Example: int x> = $i2;
        return;
    }

    private void mul()
    {
        emp.Example$MyThread r0;
        emp.Example $r1, $r2;
        int $i0, $i1, $i2;

        r0 := @this: emp.Example$MyThread;
        staticinvoke <rvpredict.logging.ReplayRT: void logFieldAcc()>();
        $r1 = r0.<emp.Example$MyThread: emp.Example t>;
        staticinvoke <rvpredict.logging.ReplayRT: void logFieldAcc()>();
        $r2 = r0.<emp.Example$MyThread: emp.Example t>;
        staticinvoke <rvpredict.logging.ReplayRT: void logFieldAcc()>();
        $i0 = $r2.<emp.Example: int x>;
        staticinvoke <rvpredict.logging.ReplayRT: void logFieldAcc()>();
        $i1 = r0.<emp.Example$MyThread: int id>;
        $i2 = $i0 * $i1;
        staticinvoke <rvpredict.logging.ReplayRT: void logFieldAcc()>();
        $r1.<emp.Example: int x> = $i2;
        return;
    }

    private void div()
    {
        emp.Example$MyThread r0;
        emp.Example $r1, $r2;
        int $i0, $i1, $i2;

        r0 := @this: emp.Example$MyThread;
        staticinvoke <rvpredict.logging.ReplayRT: void logFieldAcc()>();
        $r1 = r0.<emp.Example$MyThread: emp.Example t>;
        staticinvoke <rvpredict.logging.ReplayRT: void logFieldAcc()>();
        $r2 = r0.<emp.Example$MyThread: emp.Example t>;
        staticinvoke <rvpredict.logging.ReplayRT: void logFieldAcc()>();
        $i0 = $r2.<emp.Example: int x>;
        staticinvoke <rvpredict.logging.ReplayRT: void logFieldAcc()>();
        $i1 = r0.<emp.Example$MyThread: int id>;
        $i2 = $i0 / $i1;
        staticinvoke <rvpredict.logging.ReplayRT: void logFieldAcc()>();
        $r1.<emp.Example: int x> = $i2;
        return;
    }

    private synchronized void m()
    {
        emp.Example$MyThread r0;
        emp.LocalClass $r1, r2;

        r0 := @this: emp.Example$MyThread;
        $r1 = new emp.LocalClass;
        specialinvoke $r1.<emp.LocalClass: void <init>()>();
        r2 = $r1;
        virtualinvoke r2.<emp.LocalClass: void setX(int)>(0);
        virtualinvoke r2.<emp.LocalClass: int getX()>();
        specialinvoke r0.<emp.Example$MyThread: void inc()>();
        specialinvoke r0.<emp.Example$MyThread: void dec()>();
        return;
    }

    public static synchronized void m2()
    {
        java.io.PrintStream $r0;

        staticinvoke <rvpredict.logging.ReplayRT: void logFieldAcc()>();
        $r0 = <java.lang.System: java.io.PrintStream out>;
        virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>("Hello");
        return;
    }

    public void run()
    {
        emp.Example$MyThread r0;
        int i0, i1, $i2, $i3, $i4;
        emp.LocalClass r1, $r4;
        emp.Example r2, $r5, $r7, $r8, $r10, $r11, $r12, $r15, r16, $r17, $r18;
        java.lang.InterruptedException r3, $r13;
        java.util.Random $r6, $r9;
        boolean $z0;
        java.lang.Throwable $r14, $r19;

        r0 := @this: emp.Example$MyThread;
        i0 = 0;
        goto label20;

     label0:
        $r4 = new emp.LocalClass;
        specialinvoke $r4.<emp.LocalClass: void <init>()>();
        r1 = $r4;
        staticinvoke <rvpredict.logging.ReplayRT: void logFieldAcc()>();
        $r5 = r0.<emp.Example$MyThread: emp.Example t>;
        staticinvoke <rvpredict.logging.ReplayRT: void logFieldAcc()>();
        $r6 = $r5.<emp.Example: java.util.Random r>;
        $i2 = virtualinvoke $r6.<java.util.Random: int nextInt()>();
        virtualinvoke r1.<emp.LocalClass: void setX(int)>($i2);
        i1 = virtualinvoke r1.<emp.LocalClass: int getX()>();
        if i1 <= 10 goto label1;

        staticinvoke <rvpredict.logging.ReplayRT: void logFieldAcc()>();
        $r7 = r0.<emp.Example$MyThread: emp.Example t>;
        staticinvoke <rvpredict.logging.ReplayRT: void logFieldAcc()>();
        $r8 = r0.<emp.Example$MyThread: emp.Example t>;
        staticinvoke <rvpredict.logging.ReplayRT: void logFieldAcc()>();
        $r9 = $r8.<emp.Example: java.util.Random r>;
        $z0 = virtualinvoke $r9.<java.util.Random: boolean nextBoolean()>();
        staticinvoke <rvpredict.logging.ReplayRT: void logFieldAcc()>();
        $r7.<emp.Example: boolean b> = $z0;
        goto label2;

     label1:
        staticinvoke <rvpredict.logging.ReplayRT: void logFieldAcc()>();
        $r10 = r0.<emp.Example$MyThread: emp.Example t>;
        staticinvoke <rvpredict.logging.ReplayRT: void logFieldAcc()>();
        $r10.<emp.Example: boolean b> = 1;

     label2:
        staticinvoke <rvpredict.logging.ReplayRT: void logFieldAcc()>();
        $i3 = r0.<emp.Example$MyThread: int id>;
        if $i3 >= 2 goto label13;

        staticinvoke <rvpredict.logging.ReplayRT: void logFieldAcc()>();
        $r11 = r0.<emp.Example$MyThread: emp.Example t>;
        r2 = $r11;
        staticinvoke <rvpredict.logging.ReplayRT: void logLock()>();
        entermonitor $r11;

     label3:
        specialinvoke r0.<emp.Example$MyThread: void inc()>();

     label4:
        staticinvoke <rvpredict.logging.ReplayRT: void logFieldAcc()>();
        $r12 = r0.<emp.Example$MyThread: emp.Example t>;
        virtualinvoke $r12.<java.lang.Object: void wait(long)>(10L);
        specialinvoke r0.<emp.Example$MyThread: void dec()>();

     label5:
        goto label7;

     label6:
        $r13 := @caughtexception;
        r3 = $r13;
        virtualinvoke r3.<java.lang.InterruptedException: void printStackTrace()>();

     label7:
        staticinvoke <rvpredict.logging.ReplayRT: void logUnlock()>();
        exitmonitor r2;

     label8:
        goto label12;

     label9:
        $r14 := @caughtexception;

     label10:
        staticinvoke <rvpredict.logging.ReplayRT: void logUnlock()>();
        exitmonitor r2;

     label11:
        throw $r14;

     label12:
        staticinvoke <rvpredict.logging.ReplayRT: void logStaticSyncLock()>();
        specialinvoke r0.<emp.Example$MyThread: void m()>();
        staticinvoke <rvpredict.logging.ReplayRT: void logStaticSyncUnlock()>();
        staticinvoke <rvpredict.logging.ReplayRT: void logStaticSyncLock()>();
        staticinvoke <emp.Example$MyThread: void m2()>();
        staticinvoke <rvpredict.logging.ReplayRT: void logStaticSyncUnlock()>();
        goto label19;

     label13:
        staticinvoke <rvpredict.logging.ReplayRT: void logFieldAcc()>();
        $r15 = r0.<emp.Example$MyThread: emp.Example t>;
        r16 = $r15;
        staticinvoke <rvpredict.logging.ReplayRT: void logLock()>();
        entermonitor $r15;

     label14:
        staticinvoke <rvpredict.logging.ReplayRT: void logFieldAcc()>();
        $r17 = r0.<emp.Example$MyThread: emp.Example t>;
        staticinvoke <rvpredict.logging.ReplayRT: void logFieldAcc()>();
        $r17.<emp.Example: boolean b> = 1;
        staticinvoke <rvpredict.logging.ReplayRT: void logFieldAcc()>();
        $r18 = r0.<emp.Example$MyThread: emp.Example t>;
        staticinvoke <rvpredict.logging.ReplayRT: void logNotify()>();
        virtualinvoke $r18.<java.lang.Object: void notify()>();
        specialinvoke r0.<emp.Example$MyThread: void mul()>();
        specialinvoke r0.<emp.Example$MyThread: void div()>();
        staticinvoke <rvpredict.logging.ReplayRT: void logUnlock()>();
        exitmonitor r16;

     label15:
        goto label19;

     label16:
        $r19 := @caughtexception;

     label17:
        staticinvoke <rvpredict.logging.ReplayRT: void logUnlock()>();
        exitmonitor r16;

     label18:
        throw $r19;

     label19:
        i0 = i0 + 1;

     label20:
        staticinvoke <rvpredict.logging.ReplayRT: void logFieldAcc()>();
        $i4 = <emp.Example: int TIMES>;
        if i0 < $i4 goto label0;

        return;

        catch java.lang.InterruptedException from label4 to label5 with label6;
        catch java.lang.Throwable from label3 to label8 with label9;
        catch java.lang.Throwable from label10 to label11 with label9;
        catch java.lang.Throwable from label14 to label15 with label16;
        catch java.lang.Throwable from label17 to label18 with label16;
    }
}
