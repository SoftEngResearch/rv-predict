class emp.Simple$MyThread extends java.lang.Thread
{

    void <init>()
    {
        emp.Simple$MyThread r0;

        r0 := @this: emp.Simple$MyThread;
        specialinvoke r0.<java.lang.Thread: void <init>()>();
        return;
    }

    public void run()
    {
        emp.Simple$MyThread r0;
        java.lang.Object $r1, r2, rv_local1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, rv_local12;
        int[] $r3, rv_local10;
        java.lang.Throwable $r4;
        java.io.PrintStream $r5, rv_local14;
        java.lang.Int rv_local2, rv_local3, rv_local4, rv_local5, rv_local6, rv_local7, rv_local8, rv_local9, rv_local13, rv_local15;

        r0 := @this: emp.Simple$MyThread;
        $r1 = <emp.Simple: java.lang.Object lock>;
        rv_local1 = $r1;
        staticinvoke <rvpredict.logging.RecordRT: void logFieldAcc(int,java.lang.Object,int,java.lang.Object,boolean)>(25, null, 1, rv_local1, 0);
        r2 = $r1;
        entermonitor $r1;
        staticinvoke <rvpredict.logging.RecordRT: void logLock(int,java.lang.Object)>(26, $r1);

     label0:
        $i0 = <emp.Simple: int x>;
        rv_local2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);
        staticinvoke <rvpredict.logging.RecordRT: void logFieldAcc(int,java.lang.Object,int,java.lang.Object,boolean)>(27, null, 2, rv_local2, 0);
        $i1 = $i0 + 1;
        <emp.Simple: int x> = $i1;
        rv_local3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);
        staticinvoke <rvpredict.logging.RecordRT: void logFieldAcc(int,java.lang.Object,int,java.lang.Object,boolean)>(28, null, 2, rv_local3, 1);
        $i2 = <emp.Simple: int y>;
        rv_local4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);
        staticinvoke <rvpredict.logging.RecordRT: void logFieldAcc(int,java.lang.Object,int,java.lang.Object,boolean)>(29, null, 3, rv_local4, 0);
        $i3 = $i2 + 1;
        <emp.Simple: int y> = $i3;
        rv_local5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);
        staticinvoke <rvpredict.logging.RecordRT: void logFieldAcc(int,java.lang.Object,int,java.lang.Object,boolean)>(30, null, 3, rv_local5, 1);
        $i4 = <emp.Simple: int q>;
        rv_local6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);
        staticinvoke <rvpredict.logging.RecordRT: void logFieldAcc(int,java.lang.Object,int,java.lang.Object,boolean)>(31, null, 5, rv_local6, 0);
        $i5 = $i4 + 1;
        <emp.Simple: int q> = $i5;
        rv_local7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);
        staticinvoke <rvpredict.logging.RecordRT: void logFieldAcc(int,java.lang.Object,int,java.lang.Object,boolean)>(32, null, 5, rv_local7, 1);
        $i6 = <emp.Simple: int z>;
        rv_local8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6);
        staticinvoke <rvpredict.logging.RecordRT: void logFieldAcc(int,java.lang.Object,int,java.lang.Object,boolean)>(33, null, 4, rv_local8, 0);
        $i7 = $i6 + 1;
        <emp.Simple: int z> = $i7;
        rv_local9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i7);
        staticinvoke <rvpredict.logging.RecordRT: void logFieldAcc(int,java.lang.Object,int,java.lang.Object,boolean)>(34, null, 4, rv_local9, 1);
        $r3 = <emp.Simple: int[] foo>;
        rv_local10 = $r3;
        staticinvoke <rvpredict.logging.RecordRT: void logFieldAcc(int,java.lang.Object,int,java.lang.Object,boolean)>(35, null, 6, rv_local10, 0);
        $r3[0] = 1;
        rv_local12 = 0;
        rv_local13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);
        staticinvoke <rvpredict.logging.RecordRT: void logArrayAcc(int,java.lang.Object,int,java.lang.Object,boolean)>(36, $r3, rv_local12, rv_local13, 1);
        staticinvoke <rvpredict.logging.RecordRT: void logUnlock(int,java.lang.Object)>(37, r2);
        exitmonitor r2;

     label1:
        staticinvoke <rvpredict.logging.RecordRT: void logBranch(int)>(38);
        goto label5;

     label2:
        $r4 := @caughtexception;

     label3:
        staticinvoke <rvpredict.logging.RecordRT: void logUnlock(int,java.lang.Object)>(37, r2);
        exitmonitor r2;

     label4:
        throw $r4;

     label5:
        $r5 = <java.lang.System: java.io.PrintStream out>;
        rv_local14 = $r5;
        staticinvoke <rvpredict.logging.RecordRT: void logFieldAcc(int,java.lang.Object,int,java.lang.Object,boolean)>(39, null, 7, rv_local14, 0);
        $i8 = <emp.Simple: int x>;
        rv_local15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i8);
        staticinvoke <rvpredict.logging.RecordRT: void logFieldAcc(int,java.lang.Object,int,java.lang.Object,boolean)>(40, null, 2, rv_local15, 0);
        $i9 = 1 / $i8;
        virtualinvoke $r5.<java.io.PrintStream: void println(int)>($i9);
        return;

        catch java.lang.Throwable from label0 to label1 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }
}
