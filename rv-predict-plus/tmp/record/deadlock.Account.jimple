public class deadlock.Account extends java.lang.Object
{
    private int balance;

    void <init>(int)
    {
        deadlock.Account r0;
        int i0;
        java.lang.Int rv_local1;

        r0 := @this: deadlock.Account;
        i0 := @parameter0: int;
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(39);
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<deadlock.Account: int balance> = i0;
        rv_local1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);
        staticinvoke <rvpredict.logging.RecordRT: void logFieldAcc(int,java.lang.Object,int,java.lang.Object,boolean)>(38, r0, 2, rv_local1, 1);
        return;
    }

    public int getBalance()
    {
        deadlock.Account r0;
        int $i0;

        r0 := @this: deadlock.Account;
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(40);
        $i0 = r0.<deadlock.Account: int balance>;
        return $i0;
    }

    public synchronized void deposit(int)
    {
        deadlock.Account r0;
        int i0, $i1, $i2;
        java.lang.Int rv_local1, rv_local2;

        r0 := @this: deadlock.Account;
        i0 := @parameter0: int;
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(41);
        $i1 = r0.<deadlock.Account: int balance>;
        rv_local1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);
        staticinvoke <rvpredict.logging.RecordRT: void logFieldAcc(int,java.lang.Object,int,java.lang.Object,boolean)>(41, r0, 2, rv_local1, 0);
        $i2 = $i1 + i0;
        r0.<deadlock.Account: int balance> = $i2;
        rv_local2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);
        staticinvoke <rvpredict.logging.RecordRT: void logFieldAcc(int,java.lang.Object,int,java.lang.Object,boolean)>(42, r0, 2, rv_local2, 1);
        return;
    }

    public synchronized int withdraw(int)
    {
        deadlock.Account r0;
        int i0, $i1, $i2, $i3;
        java.lang.Int rv_local1, rv_local2, rv_local3;

        r0 := @this: deadlock.Account;
        i0 := @parameter0: int;
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(43);
        $i1 = r0.<deadlock.Account: int balance>;
        rv_local1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);
        staticinvoke <rvpredict.logging.RecordRT: void logFieldAcc(int,java.lang.Object,int,java.lang.Object,boolean)>(43, r0, 2, rv_local1, 0);
        staticinvoke <rvpredict.logging.RecordRT: void logBranch(int)>(44);
        if $i1 < i0 goto label0;

        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(45);
        $i2 = r0.<deadlock.Account: int balance>;
        rv_local2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);
        staticinvoke <rvpredict.logging.RecordRT: void logFieldAcc(int,java.lang.Object,int,java.lang.Object,boolean)>(45, r0, 2, rv_local2, 0);
        $i3 = $i2 - i0;
        r0.<deadlock.Account: int balance> = $i3;
        rv_local3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);
        staticinvoke <rvpredict.logging.RecordRT: void logFieldAcc(int,java.lang.Object,int,java.lang.Object,boolean)>(46, r0, 2, rv_local3, 1);
        return i0;

     label0:
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(47);
        return 0;
    }
}
