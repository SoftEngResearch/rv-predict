public final class stringbuffer.StringBuffer extends java.lang.Object implements java.io.Serializable, java.lang.CharSequence
{
    private char[] value;
    private int count;
    private boolean shared;
    static final long serialVersionUID;
    private static final stringbuffer.StringBuffer NULL;

    static void <clinit>()
    {
        stringbuffer.StringBuffer $r0, rv_local1;

        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(19);
        $r0 = new stringbuffer.StringBuffer;
        specialinvoke $r0.<stringbuffer.StringBuffer: void <init>(java.lang.String)>("null");
        <stringbuffer.StringBuffer: stringbuffer.StringBuffer NULL> = $r0;
        rv_local1 = $r0;
        staticinvoke <rvpredict.logging.RecordRT: void logFieldAcc(int,java.lang.Object,int,java.lang.Object,boolean)>(18, null, 10, rv_local1, 1);
        return;
    }

    public void <init>()
    {
        stringbuffer.StringBuffer r0;

        r0 := @this: stringbuffer.StringBuffer;
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(20);
        specialinvoke r0.<stringbuffer.StringBuffer: void <init>(int)>(16);
        return;
    }

    public void <init>(int)
    {
        stringbuffer.StringBuffer r0;
        int i0;
        char[] $r1, rv_local1;
        java.lang.Int rv_local2;

        r0 := @this: stringbuffer.StringBuffer;
        i0 := @parameter0: int;
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(23);
        specialinvoke r0.<java.lang.Object: void <init>()>();
        $r1 = newarray (char)[i0];
        r0.<stringbuffer.StringBuffer: char[] value> = $r1;
        rv_local1 = $r1;
        staticinvoke <rvpredict.logging.RecordRT: void logFieldAcc(int,java.lang.Object,int,java.lang.Object,boolean)>(21, r0, 11, rv_local1, 1);
        r0.<stringbuffer.StringBuffer: boolean shared> = 0;
        rv_local2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);
        staticinvoke <rvpredict.logging.RecordRT: void logFieldAcc(int,java.lang.Object,int,java.lang.Object,boolean)>(22, r0, 12, rv_local2, 1);
        return;
    }

    public void <init>(java.lang.String)
    {
        stringbuffer.StringBuffer r0;
        java.lang.String r1;
        int $i0, $i1;

        r0 := @this: stringbuffer.StringBuffer;
        r1 := @parameter0: java.lang.String;
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(25);
        $i0 = virtualinvoke r1.<java.lang.String: int length()>();
        $i1 = $i0 + 16;
        specialinvoke r0.<stringbuffer.StringBuffer: void <init>(int)>($i1);
        staticinvoke <rvpredict.logging.RecordRT: void logStaticSyncLock(int,int)>(24, 13);
        virtualinvoke r0.<stringbuffer.StringBuffer: stringbuffer.StringBuffer append(java.lang.String)>(r1);
        staticinvoke <rvpredict.logging.RecordRT: void logStaticSyncUnlock(int,int)>(24, 13);
        return;
    }

    public synchronized int length()
    {
        stringbuffer.StringBuffer r0;
        int $i0;
        java.lang.Int rv_local1;

        r0 := @this: stringbuffer.StringBuffer;
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(26);
        $i0 = r0.<stringbuffer.StringBuffer: int count>;
        rv_local1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);
        staticinvoke <rvpredict.logging.RecordRT: void logFieldAcc(int,java.lang.Object,int,java.lang.Object,boolean)>(26, r0, 14, rv_local1, 0);
        return $i0;
    }

    public synchronized int capacity()
    {
        stringbuffer.StringBuffer r0;
        char[] $r1;
        int $i0;

        r0 := @this: stringbuffer.StringBuffer;
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(27);
        $r1 = r0.<stringbuffer.StringBuffer: char[] value>;
        $i0 = lengthof $r1;
        return $i0;
    }

    private final void copy()
    {
        stringbuffer.StringBuffer r0;
        char[] r1, $r2, $r3, rv_local1, rv_local2, rv_local4;
        int $i0, $i1;
        java.lang.Int rv_local3, rv_local5;

        r0 := @this: stringbuffer.StringBuffer;
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(28);
        $r2 = r0.<stringbuffer.StringBuffer: char[] value>;
        rv_local1 = $r2;
        staticinvoke <rvpredict.logging.RecordRT: void logFieldAcc(int,java.lang.Object,int,java.lang.Object,boolean)>(28, r0, 15, rv_local1, 0);
        $i0 = lengthof $r2;
        r1 = newarray (char)[$i0];
        $r3 = r0.<stringbuffer.StringBuffer: char[] value>;
        rv_local2 = $r3;
        staticinvoke <rvpredict.logging.RecordRT: void logFieldAcc(int,java.lang.Object,int,java.lang.Object,boolean)>(29, r0, 16, rv_local2, 0);
        $i1 = r0.<stringbuffer.StringBuffer: int count>;
        rv_local3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);
        staticinvoke <rvpredict.logging.RecordRT: void logFieldAcc(int,java.lang.Object,int,java.lang.Object,boolean)>(30, r0, 17, rv_local3, 0);
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, r1, 0, $i1);
        r0.<stringbuffer.StringBuffer: char[] value> = r1;
        rv_local4 = r1;
        staticinvoke <rvpredict.logging.RecordRT: void logFieldAcc(int,java.lang.Object,int,java.lang.Object,boolean)>(31, r0, 18, rv_local4, 1);
        r0.<stringbuffer.StringBuffer: boolean shared> = 0;
        rv_local5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);
        staticinvoke <rvpredict.logging.RecordRT: void logFieldAcc(int,java.lang.Object,int,java.lang.Object,boolean)>(32, r0, 19, rv_local5, 1);
        return;
    }

    public synchronized void ensureCapacity(int)
    {
        stringbuffer.StringBuffer r0;
        int i0, $i1;
        char[] $r1;

        r0 := @this: stringbuffer.StringBuffer;
        i0 := @parameter0: int;
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(34);
        $r1 = r0.<stringbuffer.StringBuffer: char[] value>;
        $i1 = lengthof $r1;
        staticinvoke <rvpredict.logging.RecordRT: void logBranch(int)>(33);
        if i0 <= $i1 goto label0;

        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(35);
        specialinvoke r0.<stringbuffer.StringBuffer: void expandCapacity(int)>(i0);

     label0:
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(36);
        return;
    }

    private void expandCapacity(int)
    {
        stringbuffer.StringBuffer r0;
        int i0, i1, $i2, $i3, $i4;
        char[] r1, $r2, $r3, rv_local1, rv_local2, rv_local4;
        java.lang.Int rv_local3, rv_local5;

        r0 := @this: stringbuffer.StringBuffer;
        i0 := @parameter0: int;
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(37);
        $r2 = r0.<stringbuffer.StringBuffer: char[] value>;
        rv_local1 = $r2;
        staticinvoke <rvpredict.logging.RecordRT: void logFieldAcc(int,java.lang.Object,int,java.lang.Object,boolean)>(37, r0, 20, rv_local1, 0);
        $i2 = lengthof $r2;
        $i3 = $i2 + 1;
        i1 = $i3 * 2;
        staticinvoke <rvpredict.logging.RecordRT: void logBranch(int)>(38);
        if i1 >= 0 goto label0;

        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(45);
        i1 = 2147483647;
        staticinvoke <rvpredict.logging.RecordRT: void logBranch(int)>(39);
        goto label1;

     label0:
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(46);
        staticinvoke <rvpredict.logging.RecordRT: void logBranch(int)>(40);
        if i0 <= i1 goto label1;

        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(47);
        i1 = i0;

     label1:
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(48);
        r1 = newarray (char)[i1];
        $r3 = r0.<stringbuffer.StringBuffer: char[] value>;
        rv_local2 = $r3;
        staticinvoke <rvpredict.logging.RecordRT: void logFieldAcc(int,java.lang.Object,int,java.lang.Object,boolean)>(41, r0, 21, rv_local2, 0);
        $i4 = r0.<stringbuffer.StringBuffer: int count>;
        rv_local3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);
        staticinvoke <rvpredict.logging.RecordRT: void logFieldAcc(int,java.lang.Object,int,java.lang.Object,boolean)>(42, r0, 22, rv_local3, 0);
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, r1, 0, $i4);
        r0.<stringbuffer.StringBuffer: char[] value> = r1;
        rv_local4 = r1;
        staticinvoke <rvpredict.logging.RecordRT: void logFieldAcc(int,java.lang.Object,int,java.lang.Object,boolean)>(43, r0, 23, rv_local4, 1);
        r0.<stringbuffer.StringBuffer: boolean shared> = 0;
        rv_local5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);
        staticinvoke <rvpredict.logging.RecordRT: void logFieldAcc(int,java.lang.Object,int,java.lang.Object,boolean)>(44, r0, 24, rv_local5, 1);
        return;
    }

    public synchronized void setLength(int)
    {
        stringbuffer.StringBuffer r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.StringIndexOutOfBoundsException $r1;
        char[] $r2, $r3, $r5;
        boolean $z0, $z1;

        r0 := @this: stringbuffer.StringBuffer;
        i0 := @parameter0: int;
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(59);
        staticinvoke <rvpredict.logging.RecordRT: void logBranch(int)>(49);
        if i0 >= 0 goto label0;

        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(60);
        $r1 = new java.lang.StringIndexOutOfBoundsException;
        specialinvoke $r1.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(i0);
        throw $r1;

     label0:
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(61);
        $r2 = r0.<stringbuffer.StringBuffer: char[] value>;
        $i1 = lengthof $r2;
        staticinvoke <rvpredict.logging.RecordRT: void logBranch(int)>(50);
        if i0 <= $i1 goto label1;

        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(62);
        specialinvoke r0.<stringbuffer.StringBuffer: void expandCapacity(int)>(i0);

     label1:
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(63);
        $i2 = r0.<stringbuffer.StringBuffer: int count>;
        staticinvoke <rvpredict.logging.RecordRT: void logBranch(int)>(51);
        if $i2 >= i0 goto label4;

        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(64);
        $z0 = r0.<stringbuffer.StringBuffer: boolean shared>;
        staticinvoke <rvpredict.logging.RecordRT: void logBranch(int)>(52);
        if $z0 == 0 goto label3;

        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(65);
        specialinvoke r0.<stringbuffer.StringBuffer: void copy()>();
        staticinvoke <rvpredict.logging.RecordRT: void logBranch(int)>(53);
        goto label3;

     label2:
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(66);
        $r3 = r0.<stringbuffer.StringBuffer: char[] value>;
        $i3 = r0.<stringbuffer.StringBuffer: int count>;
        $r3[$i3] = 0;
        $i4 = r0.<stringbuffer.StringBuffer: int count>;
        $i5 = $i4 + 1;
        r0.<stringbuffer.StringBuffer: int count> = $i5;

     label3:
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(67);
        $i6 = r0.<stringbuffer.StringBuffer: int count>;
        staticinvoke <rvpredict.logging.RecordRT: void logBranch(int)>(54);
        if $i6 < i0 goto label2;

        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(68);
        staticinvoke <rvpredict.logging.RecordRT: void logBranch(int)>(55);
        goto label6;

     label4:
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(69);
        r0.<stringbuffer.StringBuffer: int count> = i0;
        $z1 = r0.<stringbuffer.StringBuffer: boolean shared>;
        staticinvoke <rvpredict.logging.RecordRT: void logBranch(int)>(56);
        if $z1 == 0 goto label6;

        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(70);
        staticinvoke <rvpredict.logging.RecordRT: void logBranch(int)>(57);
        if i0 <= 0 goto label5;

        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(71);
        specialinvoke r0.<stringbuffer.StringBuffer: void copy()>();
        staticinvoke <rvpredict.logging.RecordRT: void logBranch(int)>(58);
        goto label6;

     label5:
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(72);
        $r5 = newarray (char)[16];
        r0.<stringbuffer.StringBuffer: char[] value> = $r5;
        r0.<stringbuffer.StringBuffer: boolean shared> = 0;

     label6:
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(73);
        return;
    }

    public synchronized char charAt(int)
    {
        stringbuffer.StringBuffer r0;
        int i0, $i1;
        java.lang.StringIndexOutOfBoundsException $r1;
        char[] $r2;
        char $c2;

        r0 := @this: stringbuffer.StringBuffer;
        i0 := @parameter0: int;
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(76);
        staticinvoke <rvpredict.logging.RecordRT: void logBranch(int)>(74);
        if i0 < 0 goto label0;

        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(77);
        $i1 = r0.<stringbuffer.StringBuffer: int count>;
        staticinvoke <rvpredict.logging.RecordRT: void logBranch(int)>(75);
        if i0 < $i1 goto label1;

     label0:
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(78);
        $r1 = new java.lang.StringIndexOutOfBoundsException;
        specialinvoke $r1.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(i0);
        throw $r1;

     label1:
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(79);
        $r2 = r0.<stringbuffer.StringBuffer: char[] value>;
        $c2 = $r2[i0];
        return $c2;
    }

    public synchronized void getChars(int, int, char[], int)
    {
        stringbuffer.StringBuffer r0;
        int i0, i1, i2, $i3, $i4;
        char[] r1, $r5, rv_local2;
        java.lang.StringIndexOutOfBoundsException $r2, $r3, $r4;
        java.lang.Int rv_local1;

        r0 := @this: stringbuffer.StringBuffer;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        r1 := @parameter2: char[];
        i2 := @parameter3: int;
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(86);
        staticinvoke <rvpredict.logging.RecordRT: void logBranch(int)>(80);
        if i0 >= 0 goto label0;

        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(87);
        $r2 = new java.lang.StringIndexOutOfBoundsException;
        specialinvoke $r2.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(i0);
        throw $r2;

     label0:
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(88);
        staticinvoke <rvpredict.logging.RecordRT: void logBranch(int)>(81);
        if i1 < 0 goto label1;

        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(82);
        $i3 = r0.<stringbuffer.StringBuffer: int count>;
        rv_local1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);
        staticinvoke <rvpredict.logging.RecordRT: void logFieldAcc(int,java.lang.Object,int,java.lang.Object,boolean)>(82, r0, 25, rv_local1, 0);
        staticinvoke <rvpredict.logging.RecordRT: void logBranch(int)>(83);
        if i1 <= $i3 goto label2;

     label1:
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(89);
        $r3 = new java.lang.StringIndexOutOfBoundsException;
        specialinvoke $r3.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(i1);
        throw $r3;

     label2:
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(90);
        staticinvoke <rvpredict.logging.RecordRT: void logBranch(int)>(84);
        if i0 <= i1 goto label3;

        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(91);
        $r4 = new java.lang.StringIndexOutOfBoundsException;
        specialinvoke $r4.<java.lang.StringIndexOutOfBoundsException: void <init>(java.lang.String)>("srcBegin > srcEnd");
        throw $r4;

     label3:
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(85);
        $r5 = r0.<stringbuffer.StringBuffer: char[] value>;
        rv_local2 = $r5;
        staticinvoke <rvpredict.logging.RecordRT: void logFieldAcc(int,java.lang.Object,int,java.lang.Object,boolean)>(85, r0, 26, rv_local2, 0);
        $i4 = i1 - i0;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, i0, r1, i2, $i4);
        return;
    }

    public synchronized void setCharAt(int, char)
    {
        stringbuffer.StringBuffer r0;
        int i0, $i2;
        char c1;
        java.lang.StringIndexOutOfBoundsException $r1;
        boolean $z0;
        char[] $r2;

        r0 := @this: stringbuffer.StringBuffer;
        i0 := @parameter0: int;
        c1 := @parameter1: char;
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(95);
        staticinvoke <rvpredict.logging.RecordRT: void logBranch(int)>(92);
        if i0 < 0 goto label0;

        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(96);
        $i2 = r0.<stringbuffer.StringBuffer: int count>;
        staticinvoke <rvpredict.logging.RecordRT: void logBranch(int)>(93);
        if i0 < $i2 goto label1;

     label0:
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(97);
        $r1 = new java.lang.StringIndexOutOfBoundsException;
        specialinvoke $r1.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(i0);
        throw $r1;

     label1:
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(98);
        $z0 = r0.<stringbuffer.StringBuffer: boolean shared>;
        staticinvoke <rvpredict.logging.RecordRT: void logBranch(int)>(94);
        if $z0 == 0 goto label2;

        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(99);
        specialinvoke r0.<stringbuffer.StringBuffer: void copy()>();

     label2:
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(100);
        $r2 = r0.<stringbuffer.StringBuffer: char[] value>;
        $r2[i0] = c1;
        return;
    }

    public synchronized stringbuffer.StringBuffer append(java.lang.Object)
    {
        stringbuffer.StringBuffer r0, $r3;
        java.lang.Object r1;
        java.lang.String $r2;

        r0 := @this: stringbuffer.StringBuffer;
        r1 := @parameter0: java.lang.Object;
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(101);
        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);
        $r3 = virtualinvoke r0.<stringbuffer.StringBuffer: stringbuffer.StringBuffer append(java.lang.String)>($r2);
        return $r3;
    }

    public synchronized stringbuffer.StringBuffer append(java.lang.String)
    {
        stringbuffer.StringBuffer r0;
        java.lang.String r1;
        int i0, i1, $i2, $i3, $i4;
        char[] $r2, $r3;

        r0 := @this: stringbuffer.StringBuffer;
        r1 := @parameter0: java.lang.String;
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(104);
        staticinvoke <rvpredict.logging.RecordRT: void logBranch(int)>(102);
        if r1 != null goto label0;

        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(105);
        r1 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

     label0:
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(106);
        i0 = virtualinvoke r1.<java.lang.String: int length()>();
        $i2 = r0.<stringbuffer.StringBuffer: int count>;
        i1 = $i2 + i0;
        $r2 = r0.<stringbuffer.StringBuffer: char[] value>;
        $i3 = lengthof $r2;
        staticinvoke <rvpredict.logging.RecordRT: void logBranch(int)>(103);
        if i1 <= $i3 goto label1;

        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(107);
        specialinvoke r0.<stringbuffer.StringBuffer: void expandCapacity(int)>(i1);

     label1:
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(108);
        $r3 = r0.<stringbuffer.StringBuffer: char[] value>;
        $i4 = r0.<stringbuffer.StringBuffer: int count>;
        virtualinvoke r1.<java.lang.String: void getChars(int,int,char[],int)>(0, i0, $r3, $i4);
        r0.<stringbuffer.StringBuffer: int count> = i1;
        return r0;
    }

    public synchronized stringbuffer.StringBuffer append(stringbuffer.StringBuffer)
    {
        stringbuffer.StringBuffer r0, r1, rv_local1;
        int i0, i1, $i2, $i3, $i4;
        char[] $r2, $r3, rv_local3, rv_local4;
        java.lang.Int rv_local2, rv_local5, rv_local6;

        r0 := @this: stringbuffer.StringBuffer;
        r1 := @parameter0: stringbuffer.StringBuffer;
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(118);
        staticinvoke <rvpredict.logging.RecordRT: void logBranch(int)>(109);
        if r1 != null goto label0;

        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(110);
        r1 = <stringbuffer.StringBuffer: stringbuffer.StringBuffer NULL>;
        rv_local1 = r1;
        staticinvoke <rvpredict.logging.RecordRT: void logFieldAcc(int,java.lang.Object,int,java.lang.Object,boolean)>(110, null, 27, rv_local1, 0);

     label0:
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(119);
        i0 = virtualinvoke r1.<stringbuffer.StringBuffer: int length()>();
        $i2 = r0.<stringbuffer.StringBuffer: int count>;
        rv_local2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);
        staticinvoke <rvpredict.logging.RecordRT: void logFieldAcc(int,java.lang.Object,int,java.lang.Object,boolean)>(111, r0, 28, rv_local2, 0);
        i1 = $i2 + i0;
        $r2 = r0.<stringbuffer.StringBuffer: char[] value>;
        rv_local3 = $r2;
        staticinvoke <rvpredict.logging.RecordRT: void logFieldAcc(int,java.lang.Object,int,java.lang.Object,boolean)>(112, r0, 29, rv_local3, 0);
        $i3 = lengthof $r2;
        staticinvoke <rvpredict.logging.RecordRT: void logBranch(int)>(113);
        if i1 <= $i3 goto label1;

        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(120);
        specialinvoke r0.<stringbuffer.StringBuffer: void expandCapacity(int)>(i1);

     label1:
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(121);
        staticinvoke <java.lang.Thread: void yield()>();
        $r3 = r0.<stringbuffer.StringBuffer: char[] value>;
        rv_local4 = $r3;
        staticinvoke <rvpredict.logging.RecordRT: void logFieldAcc(int,java.lang.Object,int,java.lang.Object,boolean)>(114, r0, 30, rv_local4, 0);
        $i4 = r0.<stringbuffer.StringBuffer: int count>;
        rv_local5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);
        staticinvoke <rvpredict.logging.RecordRT: void logFieldAcc(int,java.lang.Object,int,java.lang.Object,boolean)>(115, r0, 31, rv_local5, 0);
        staticinvoke <rvpredict.logging.RecordRT: void logStaticSyncLock(int,int)>(116, 32);
        virtualinvoke r1.<stringbuffer.StringBuffer: void getChars(int,int,char[],int)>(0, i0, $r3, $i4);
        staticinvoke <rvpredict.logging.RecordRT: void logStaticSyncUnlock(int,int)>(116, 32);
        r0.<stringbuffer.StringBuffer: int count> = i1;
        rv_local6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);
        staticinvoke <rvpredict.logging.RecordRT: void logFieldAcc(int,java.lang.Object,int,java.lang.Object,boolean)>(117, r0, 33, rv_local6, 1);
        return r0;
    }

    public synchronized stringbuffer.StringBuffer append(char[])
    {
        stringbuffer.StringBuffer r0;
        char[] r1, $r2, $r3;
        int i0, i1, $i2, $i3, $i4;

        r0 := @this: stringbuffer.StringBuffer;
        r1 := @parameter0: char[];
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(123);
        i0 = lengthof r1;
        $i2 = r0.<stringbuffer.StringBuffer: int count>;
        i1 = $i2 + i0;
        $r2 = r0.<stringbuffer.StringBuffer: char[] value>;
        $i3 = lengthof $r2;
        staticinvoke <rvpredict.logging.RecordRT: void logBranch(int)>(122);
        if i1 <= $i3 goto label0;

        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(124);
        specialinvoke r0.<stringbuffer.StringBuffer: void expandCapacity(int)>(i1);

     label0:
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(125);
        $r3 = r0.<stringbuffer.StringBuffer: char[] value>;
        $i4 = r0.<stringbuffer.StringBuffer: int count>;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, $r3, $i4, i0);
        r0.<stringbuffer.StringBuffer: int count> = i1;
        return r0;
    }

    public synchronized stringbuffer.StringBuffer append(char[], int, int)
    {
        stringbuffer.StringBuffer r0;
        char[] r1, $r2, $r3;
        int i0, i1, i2, $i3, $i4, $i5;

        r0 := @this: stringbuffer.StringBuffer;
        r1 := @parameter0: char[];
        i0 := @parameter1: int;
        i1 := @parameter2: int;
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(127);
        $i3 = r0.<stringbuffer.StringBuffer: int count>;
        i2 = $i3 + i1;
        $r2 = r0.<stringbuffer.StringBuffer: char[] value>;
        $i4 = lengthof $r2;
        staticinvoke <rvpredict.logging.RecordRT: void logBranch(int)>(126);
        if i2 <= $i4 goto label0;

        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(128);
        specialinvoke r0.<stringbuffer.StringBuffer: void expandCapacity(int)>(i2);

     label0:
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(129);
        $r3 = r0.<stringbuffer.StringBuffer: char[] value>;
        $i5 = r0.<stringbuffer.StringBuffer: int count>;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i0, $r3, $i5, i1);
        r0.<stringbuffer.StringBuffer: int count> = i2;
        return r0;
    }

    public synchronized stringbuffer.StringBuffer append(boolean)
    {
        stringbuffer.StringBuffer r0;
        boolean z0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23;
        char[] $r1, $r2, $r4, $r6, $r8, $r10, $r11, $r13, $r15, $r17, $r19;

        r0 := @this: stringbuffer.StringBuffer;
        z0 := @parameter0: boolean;
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(134);
        staticinvoke <rvpredict.logging.RecordRT: void logBranch(int)>(130);
        if z0 == 0 goto label1;

        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(135);
        $i2 = r0.<stringbuffer.StringBuffer: int count>;
        i0 = $i2 + 4;
        $r1 = r0.<stringbuffer.StringBuffer: char[] value>;
        $i3 = lengthof $r1;
        staticinvoke <rvpredict.logging.RecordRT: void logBranch(int)>(131);
        if i0 <= $i3 goto label0;

        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(136);
        specialinvoke r0.<stringbuffer.StringBuffer: void expandCapacity(int)>(i0);

     label0:
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(137);
        $r2 = r0.<stringbuffer.StringBuffer: char[] value>;
        $i1 = r0.<stringbuffer.StringBuffer: int count>;
        $i4 = $i1 + 1;
        r0.<stringbuffer.StringBuffer: int count> = $i4;
        $r2[$i1] = 116;
        $r4 = r0.<stringbuffer.StringBuffer: char[] value>;
        $i5 = r0.<stringbuffer.StringBuffer: int count>;
        $i6 = $i5 + 1;
        r0.<stringbuffer.StringBuffer: int count> = $i6;
        $r4[$i5] = 114;
        $r6 = r0.<stringbuffer.StringBuffer: char[] value>;
        $i7 = r0.<stringbuffer.StringBuffer: int count>;
        $i8 = $i7 + 1;
        r0.<stringbuffer.StringBuffer: int count> = $i8;
        $r6[$i7] = 117;
        $r8 = r0.<stringbuffer.StringBuffer: char[] value>;
        $i9 = r0.<stringbuffer.StringBuffer: int count>;
        $i10 = $i9 + 1;
        r0.<stringbuffer.StringBuffer: int count> = $i10;
        $r8[$i9] = 101;
        staticinvoke <rvpredict.logging.RecordRT: void logBranch(int)>(132);
        goto label3;

     label1:
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(138);
        $i11 = r0.<stringbuffer.StringBuffer: int count>;
        i12 = $i11 + 5;
        $r10 = r0.<stringbuffer.StringBuffer: char[] value>;
        $i13 = lengthof $r10;
        staticinvoke <rvpredict.logging.RecordRT: void logBranch(int)>(133);
        if i12 <= $i13 goto label2;

        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(139);
        specialinvoke r0.<stringbuffer.StringBuffer: void expandCapacity(int)>(i12);

     label2:
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(140);
        $r11 = r0.<stringbuffer.StringBuffer: char[] value>;
        $i14 = r0.<stringbuffer.StringBuffer: int count>;
        $i15 = $i14 + 1;
        r0.<stringbuffer.StringBuffer: int count> = $i15;
        $r11[$i14] = 102;
        $r13 = r0.<stringbuffer.StringBuffer: char[] value>;
        $i16 = r0.<stringbuffer.StringBuffer: int count>;
        $i17 = $i16 + 1;
        r0.<stringbuffer.StringBuffer: int count> = $i17;
        $r13[$i16] = 97;
        $r15 = r0.<stringbuffer.StringBuffer: char[] value>;
        $i18 = r0.<stringbuffer.StringBuffer: int count>;
        $i19 = $i18 + 1;
        r0.<stringbuffer.StringBuffer: int count> = $i19;
        $r15[$i18] = 108;
        $r17 = r0.<stringbuffer.StringBuffer: char[] value>;
        $i20 = r0.<stringbuffer.StringBuffer: int count>;
        $i21 = $i20 + 1;
        r0.<stringbuffer.StringBuffer: int count> = $i21;
        $r17[$i20] = 115;
        $r19 = r0.<stringbuffer.StringBuffer: char[] value>;
        $i22 = r0.<stringbuffer.StringBuffer: int count>;
        $i23 = $i22 + 1;
        r0.<stringbuffer.StringBuffer: int count> = $i23;
        $r19[$i22] = 101;

     label3:
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(141);
        return r0;
    }

    public synchronized stringbuffer.StringBuffer append(char)
    {
        stringbuffer.StringBuffer r0;
        char c0;
        int i1, $i2, $i3, $i4, $i5;
        char[] $r1, $r2;

        r0 := @this: stringbuffer.StringBuffer;
        c0 := @parameter0: char;
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(143);
        $i3 = r0.<stringbuffer.StringBuffer: int count>;
        i1 = $i3 + 1;
        $r1 = r0.<stringbuffer.StringBuffer: char[] value>;
        $i4 = lengthof $r1;
        staticinvoke <rvpredict.logging.RecordRT: void logBranch(int)>(142);
        if i1 <= $i4 goto label0;

        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(144);
        specialinvoke r0.<stringbuffer.StringBuffer: void expandCapacity(int)>(i1);

     label0:
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(145);
        $r2 = r0.<stringbuffer.StringBuffer: char[] value>;
        $i2 = r0.<stringbuffer.StringBuffer: int count>;
        $i5 = $i2 + 1;
        r0.<stringbuffer.StringBuffer: int count> = $i5;
        $r2[$i2] = c0;
        return r0;
    }

    public synchronized stringbuffer.StringBuffer delete(int, int)
    {
        stringbuffer.StringBuffer r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.lang.StringIndexOutOfBoundsException $r1, $r2;
        boolean $z0;
        char[] $r3, $r4, rv_local4, rv_local5;
        java.lang.Int rv_local1, rv_local2, rv_local6, rv_local7, rv_local8;
        java.lang.Boolean rv_local3;

        r0 := @this: stringbuffer.StringBuffer;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(159);
        staticinvoke <rvpredict.logging.RecordRT: void logBranch(int)>(146);
        if i0 >= 0 goto label0;

        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(160);
        $r1 = new java.lang.StringIndexOutOfBoundsException;
        specialinvoke $r1.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(i0);
        throw $r1;

     label0:
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(147);
        $i3 = r0.<stringbuffer.StringBuffer: int count>;
        rv_local1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);
        staticinvoke <rvpredict.logging.RecordRT: void logFieldAcc(int,java.lang.Object,int,java.lang.Object,boolean)>(147, r0, 34, rv_local1, 0);
        staticinvoke <rvpredict.logging.RecordRT: void logBranch(int)>(148);
        if i1 <= $i3 goto label1;

        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(149);
        i1 = r0.<stringbuffer.StringBuffer: int count>;
        rv_local2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);
        staticinvoke <rvpredict.logging.RecordRT: void logFieldAcc(int,java.lang.Object,int,java.lang.Object,boolean)>(149, r0, 35, rv_local2, 0);

     label1:
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(161);
        staticinvoke <rvpredict.logging.RecordRT: void logBranch(int)>(150);
        if i0 <= i1 goto label2;

        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(162);
        $r2 = new java.lang.StringIndexOutOfBoundsException;
        specialinvoke $r2.<java.lang.StringIndexOutOfBoundsException: void <init>()>();
        throw $r2;

     label2:
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(163);
        i2 = i1 - i0;
        staticinvoke <rvpredict.logging.RecordRT: void logBranch(int)>(151);
        if i2 <= 0 goto label4;

        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(152);
        $z0 = r0.<stringbuffer.StringBuffer: boolean shared>;
        rv_local3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);
        staticinvoke <rvpredict.logging.RecordRT: void logFieldAcc(int,java.lang.Object,int,java.lang.Object,boolean)>(152, r0, 36, rv_local3, 0);
        staticinvoke <rvpredict.logging.RecordRT: void logBranch(int)>(153);
        if $z0 == 0 goto label3;

        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(164);
        specialinvoke r0.<stringbuffer.StringBuffer: void copy()>();

     label3:
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(154);
        $r3 = r0.<stringbuffer.StringBuffer: char[] value>;
        rv_local4 = $r3;
        staticinvoke <rvpredict.logging.RecordRT: void logFieldAcc(int,java.lang.Object,int,java.lang.Object,boolean)>(154, r0, 37, rv_local4, 0);
        $i4 = i0 + i2;
        $r4 = r0.<stringbuffer.StringBuffer: char[] value>;
        rv_local5 = $r4;
        staticinvoke <rvpredict.logging.RecordRT: void logFieldAcc(int,java.lang.Object,int,java.lang.Object,boolean)>(155, r0, 37, rv_local5, 0);
        $i5 = r0.<stringbuffer.StringBuffer: int count>;
        rv_local6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);
        staticinvoke <rvpredict.logging.RecordRT: void logFieldAcc(int,java.lang.Object,int,java.lang.Object,boolean)>(156, r0, 38, rv_local6, 0);
        $i6 = $i5 - i1;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, $i4, $r4, i0, $i6);
        $i7 = r0.<stringbuffer.StringBuffer: int count>;
        rv_local7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i7);
        staticinvoke <rvpredict.logging.RecordRT: void logFieldAcc(int,java.lang.Object,int,java.lang.Object,boolean)>(157, r0, 39, rv_local7, 0);
        $i8 = $i7 - i2;
        r0.<stringbuffer.StringBuffer: int count> = $i8;
        rv_local8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i8);
        staticinvoke <rvpredict.logging.RecordRT: void logFieldAcc(int,java.lang.Object,int,java.lang.Object,boolean)>(158, r0, 39, rv_local8, 1);

     label4:
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(165);
        return r0;
    }

    public synchronized stringbuffer.StringBuffer deleteCharAt(int)
    {
        stringbuffer.StringBuffer r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.StringIndexOutOfBoundsException $r1;
        boolean $z0;
        char[] $r2, $r3;

        r0 := @this: stringbuffer.StringBuffer;
        i0 := @parameter0: int;
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(169);
        staticinvoke <rvpredict.logging.RecordRT: void logBranch(int)>(166);
        if i0 < 0 goto label0;

        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(170);
        $i1 = r0.<stringbuffer.StringBuffer: int count>;
        staticinvoke <rvpredict.logging.RecordRT: void logBranch(int)>(167);
        if i0 < $i1 goto label1;

     label0:
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(171);
        $r1 = new java.lang.StringIndexOutOfBoundsException;
        specialinvoke $r1.<java.lang.StringIndexOutOfBoundsException: void <init>()>();
        throw $r1;

     label1:
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(172);
        $z0 = r0.<stringbuffer.StringBuffer: boolean shared>;
        staticinvoke <rvpredict.logging.RecordRT: void logBranch(int)>(168);
        if $z0 == 0 goto label2;

        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(173);
        specialinvoke r0.<stringbuffer.StringBuffer: void copy()>();

     label2:
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(174);
        $r2 = r0.<stringbuffer.StringBuffer: char[] value>;
        $i2 = i0 + 1;
        $r3 = r0.<stringbuffer.StringBuffer: char[] value>;
        $i3 = r0.<stringbuffer.StringBuffer: int count>;
        $i4 = $i3 - i0;
        $i5 = $i4 - 1;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, $i2, $r3, i0, $i5);
        $i6 = r0.<stringbuffer.StringBuffer: int count>;
        $i7 = $i6 - 1;
        r0.<stringbuffer.StringBuffer: int count> = $i7;
        return r0;
    }

    public synchronized stringbuffer.StringBuffer replace(int, int, java.lang.String)
    {
        stringbuffer.StringBuffer r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        java.lang.String r1;
        java.lang.StringIndexOutOfBoundsException $r2, $r3;
        char[] $r4, $r5, $r6, $r7;
        boolean $z0;

        r0 := @this: stringbuffer.StringBuffer;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        r1 := @parameter2: java.lang.String;
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(181);
        staticinvoke <rvpredict.logging.RecordRT: void logBranch(int)>(175);
        if i0 >= 0 goto label0;

        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(182);
        $r2 = new java.lang.StringIndexOutOfBoundsException;
        specialinvoke $r2.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(i0);
        throw $r2;

     label0:
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(183);
        $i4 = r0.<stringbuffer.StringBuffer: int count>;
        staticinvoke <rvpredict.logging.RecordRT: void logBranch(int)>(176);
        if i1 <= $i4 goto label1;

        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(184);
        i1 = r0.<stringbuffer.StringBuffer: int count>;

     label1:
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(185);
        staticinvoke <rvpredict.logging.RecordRT: void logBranch(int)>(177);
        if i0 <= i1 goto label2;

        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(186);
        $r3 = new java.lang.StringIndexOutOfBoundsException;
        specialinvoke $r3.<java.lang.StringIndexOutOfBoundsException: void <init>()>();
        throw $r3;

     label2:
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(187);
        i2 = virtualinvoke r1.<java.lang.String: int length()>();
        $i5 = r0.<stringbuffer.StringBuffer: int count>;
        $i6 = $i5 + i2;
        $i7 = i1 - i0;
        i3 = $i6 - $i7;
        $r4 = r0.<stringbuffer.StringBuffer: char[] value>;
        $i8 = lengthof $r4;
        staticinvoke <rvpredict.logging.RecordRT: void logBranch(int)>(178);
        if i3 <= $i8 goto label3;

        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(188);
        specialinvoke r0.<stringbuffer.StringBuffer: void expandCapacity(int)>(i3);
        staticinvoke <rvpredict.logging.RecordRT: void logBranch(int)>(179);
        goto label4;

     label3:
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(189);
        $z0 = r0.<stringbuffer.StringBuffer: boolean shared>;
        staticinvoke <rvpredict.logging.RecordRT: void logBranch(int)>(180);
        if $z0 == 0 goto label4;

        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(190);
        specialinvoke r0.<stringbuffer.StringBuffer: void copy()>();

     label4:
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(191);
        $r5 = r0.<stringbuffer.StringBuffer: char[] value>;
        $r6 = r0.<stringbuffer.StringBuffer: char[] value>;
        $i9 = i0 + i2;
        $i10 = r0.<stringbuffer.StringBuffer: int count>;
        $i11 = $i10 - i1;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, i1, $r6, $i9, $i11);
        $r7 = r0.<stringbuffer.StringBuffer: char[] value>;
        virtualinvoke r1.<java.lang.String: void getChars(int,int,char[],int)>(0, i2, $r7, i0);
        r0.<stringbuffer.StringBuffer: int count> = i3;
        return r0;
    }

    public synchronized java.lang.String substring(int)
    {
        stringbuffer.StringBuffer r0;
        int i0, $i1;
        java.lang.String $r1;

        r0 := @this: stringbuffer.StringBuffer;
        i0 := @parameter0: int;
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(192);
        $i1 = r0.<stringbuffer.StringBuffer: int count>;
        $r1 = virtualinvoke r0.<stringbuffer.StringBuffer: java.lang.String substring(int,int)>(i0, $i1);
        return $r1;
    }

    public java.lang.CharSequence subSequence(int, int)
    {
        stringbuffer.StringBuffer r0;
        int i0, i1;
        java.lang.String $r1;

        r0 := @this: stringbuffer.StringBuffer;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(193);
        $r1 = virtualinvoke r0.<stringbuffer.StringBuffer: java.lang.String substring(int,int)>(i0, i1);
        return $r1;
    }

    public synchronized java.lang.String substring(int, int)
    {
        stringbuffer.StringBuffer r0;
        int i0, i1, $i2, $i3, $i4;
        java.lang.StringIndexOutOfBoundsException $r1, $r2, $r3;
        java.lang.String $r4;
        char[] $r5;

        r0 := @this: stringbuffer.StringBuffer;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(197);
        staticinvoke <rvpredict.logging.RecordRT: void logBranch(int)>(194);
        if i0 >= 0 goto label0;

        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(198);
        $r1 = new java.lang.StringIndexOutOfBoundsException;
        specialinvoke $r1.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(i0);
        throw $r1;

     label0:
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(199);
        $i2 = r0.<stringbuffer.StringBuffer: int count>;
        staticinvoke <rvpredict.logging.RecordRT: void logBranch(int)>(195);
        if i1 <= $i2 goto label1;

        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(200);
        $r2 = new java.lang.StringIndexOutOfBoundsException;
        specialinvoke $r2.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(i1);
        throw $r2;

     label1:
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(201);
        staticinvoke <rvpredict.logging.RecordRT: void logBranch(int)>(196);
        if i0 <= i1 goto label2;

        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(202);
        $r3 = new java.lang.StringIndexOutOfBoundsException;
        $i3 = i1 - i0;
        specialinvoke $r3.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>($i3);
        throw $r3;

     label2:
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(203);
        $r4 = new java.lang.String;
        $r5 = r0.<stringbuffer.StringBuffer: char[] value>;
        $i4 = i1 - i0;
        specialinvoke $r4.<java.lang.String: void <init>(char[],int,int)>($r5, i0, $i4);
        return $r4;
    }

    public synchronized stringbuffer.StringBuffer insert(int, char[], int, int)
    {
        stringbuffer.StringBuffer r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        char[] r1, $r5, $r6, $r7, $r8;
        java.lang.StringIndexOutOfBoundsException $r2, $r3, $r4;
        boolean $z0;

        r0 := @this: stringbuffer.StringBuffer;
        i0 := @parameter0: int;
        r1 := @parameter1: char[];
        i1 := @parameter2: int;
        i2 := @parameter3: int;
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(213);
        staticinvoke <rvpredict.logging.RecordRT: void logBranch(int)>(204);
        if i0 < 0 goto label0;

        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(214);
        $i4 = r0.<stringbuffer.StringBuffer: int count>;
        staticinvoke <rvpredict.logging.RecordRT: void logBranch(int)>(205);
        if i0 <= $i4 goto label1;

     label0:
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(215);
        $r2 = new java.lang.StringIndexOutOfBoundsException;
        specialinvoke $r2.<java.lang.StringIndexOutOfBoundsException: void <init>()>();
        throw $r2;

     label1:
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(216);
        staticinvoke <rvpredict.logging.RecordRT: void logBranch(int)>(206);
        if i1 < 0 goto label2;

        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(217);
        $i5 = i1 + i2;
        staticinvoke <rvpredict.logging.RecordRT: void logBranch(int)>(207);
        if $i5 < 0 goto label2;

        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(218);
        $i6 = i1 + i2;
        $i7 = lengthof r1;
        staticinvoke <rvpredict.logging.RecordRT: void logBranch(int)>(208);
        if $i6 <= $i7 goto label3;

     label2:
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(219);
        $r3 = new java.lang.StringIndexOutOfBoundsException;
        specialinvoke $r3.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(i1);
        throw $r3;

     label3:
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(220);
        staticinvoke <rvpredict.logging.RecordRT: void logBranch(int)>(209);
        if i2 >= 0 goto label4;

        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(221);
        $r4 = new java.lang.StringIndexOutOfBoundsException;
        specialinvoke $r4.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(i2);
        throw $r4;

     label4:
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(222);
        $i8 = r0.<stringbuffer.StringBuffer: int count>;
        i3 = $i8 + i2;
        $r5 = r0.<stringbuffer.StringBuffer: char[] value>;
        $i9 = lengthof $r5;
        staticinvoke <rvpredict.logging.RecordRT: void logBranch(int)>(210);
        if i3 <= $i9 goto label5;

        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(223);
        specialinvoke r0.<stringbuffer.StringBuffer: void expandCapacity(int)>(i3);
        staticinvoke <rvpredict.logging.RecordRT: void logBranch(int)>(211);
        goto label6;

     label5:
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(224);
        $z0 = r0.<stringbuffer.StringBuffer: boolean shared>;
        staticinvoke <rvpredict.logging.RecordRT: void logBranch(int)>(212);
        if $z0 == 0 goto label6;

        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(225);
        specialinvoke r0.<stringbuffer.StringBuffer: void copy()>();

     label6:
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(226);
        $r6 = r0.<stringbuffer.StringBuffer: char[] value>;
        $r7 = r0.<stringbuffer.StringBuffer: char[] value>;
        $i10 = i0 + i2;
        $i11 = r0.<stringbuffer.StringBuffer: int count>;
        $i12 = $i11 - i0;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, i0, $r7, $i10, $i12);
        $r8 = r0.<stringbuffer.StringBuffer: char[] value>;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i1, $r8, i0, i2);
        r0.<stringbuffer.StringBuffer: int count> = i3;
        return r0;
    }

    public synchronized stringbuffer.StringBuffer insert(int, java.lang.Object)
    {
        stringbuffer.StringBuffer r0, $r3;
        int i0;
        java.lang.Object r1;
        java.lang.String $r2;

        r0 := @this: stringbuffer.StringBuffer;
        i0 := @parameter0: int;
        r1 := @parameter1: java.lang.Object;
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(227);
        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);
        $r3 = virtualinvoke r0.<stringbuffer.StringBuffer: stringbuffer.StringBuffer insert(int,java.lang.String)>(i0, $r2);
        return $r3;
    }

    public synchronized stringbuffer.StringBuffer insert(int, java.lang.String)
    {
        stringbuffer.StringBuffer r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.lang.String r1;
        java.lang.StringIndexOutOfBoundsException $r2;
        char[] $r3, $r4, $r5, $r6;
        boolean $z0;

        r0 := @this: stringbuffer.StringBuffer;
        i0 := @parameter0: int;
        r1 := @parameter1: java.lang.String;
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(234);
        staticinvoke <rvpredict.logging.RecordRT: void logBranch(int)>(228);
        if i0 < 0 goto label0;

        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(235);
        $i3 = r0.<stringbuffer.StringBuffer: int count>;
        staticinvoke <rvpredict.logging.RecordRT: void logBranch(int)>(229);
        if i0 <= $i3 goto label1;

     label0:
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(236);
        $r2 = new java.lang.StringIndexOutOfBoundsException;
        specialinvoke $r2.<java.lang.StringIndexOutOfBoundsException: void <init>()>();
        throw $r2;

     label1:
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(237);
        staticinvoke <rvpredict.logging.RecordRT: void logBranch(int)>(230);
        if r1 != null goto label2;

        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(238);
        r1 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

     label2:
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(239);
        i1 = virtualinvoke r1.<java.lang.String: int length()>();
        $i4 = r0.<stringbuffer.StringBuffer: int count>;
        i2 = $i4 + i1;
        $r3 = r0.<stringbuffer.StringBuffer: char[] value>;
        $i5 = lengthof $r3;
        staticinvoke <rvpredict.logging.RecordRT: void logBranch(int)>(231);
        if i2 <= $i5 goto label3;

        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(240);
        specialinvoke r0.<stringbuffer.StringBuffer: void expandCapacity(int)>(i2);
        staticinvoke <rvpredict.logging.RecordRT: void logBranch(int)>(232);
        goto label4;

     label3:
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(241);
        $z0 = r0.<stringbuffer.StringBuffer: boolean shared>;
        staticinvoke <rvpredict.logging.RecordRT: void logBranch(int)>(233);
        if $z0 == 0 goto label4;

        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(242);
        specialinvoke r0.<stringbuffer.StringBuffer: void copy()>();

     label4:
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(243);
        $r4 = r0.<stringbuffer.StringBuffer: char[] value>;
        $r5 = r0.<stringbuffer.StringBuffer: char[] value>;
        $i6 = i0 + i1;
        $i7 = r0.<stringbuffer.StringBuffer: int count>;
        $i8 = $i7 - i0;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, i0, $r5, $i6, $i8);
        $r6 = r0.<stringbuffer.StringBuffer: char[] value>;
        virtualinvoke r1.<java.lang.String: void getChars(int,int,char[],int)>(0, i1, $r6, i0);
        r0.<stringbuffer.StringBuffer: int count> = i2;
        return r0;
    }

    public synchronized stringbuffer.StringBuffer insert(int, char[])
    {
        stringbuffer.StringBuffer r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8;
        char[] r1, $r3, $r4, $r5, $r6;
        java.lang.StringIndexOutOfBoundsException $r2;
        boolean $z0;

        r0 := @this: stringbuffer.StringBuffer;
        i0 := @parameter0: int;
        r1 := @parameter1: char[];
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(249);
        staticinvoke <rvpredict.logging.RecordRT: void logBranch(int)>(244);
        if i0 < 0 goto label0;

        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(250);
        $i3 = r0.<stringbuffer.StringBuffer: int count>;
        staticinvoke <rvpredict.logging.RecordRT: void logBranch(int)>(245);
        if i0 <= $i3 goto label1;

     label0:
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(251);
        $r2 = new java.lang.StringIndexOutOfBoundsException;
        specialinvoke $r2.<java.lang.StringIndexOutOfBoundsException: void <init>()>();
        throw $r2;

     label1:
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(252);
        i1 = lengthof r1;
        $i4 = r0.<stringbuffer.StringBuffer: int count>;
        i2 = $i4 + i1;
        $r3 = r0.<stringbuffer.StringBuffer: char[] value>;
        $i5 = lengthof $r3;
        staticinvoke <rvpredict.logging.RecordRT: void logBranch(int)>(246);
        if i2 <= $i5 goto label2;

        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(253);
        specialinvoke r0.<stringbuffer.StringBuffer: void expandCapacity(int)>(i2);
        staticinvoke <rvpredict.logging.RecordRT: void logBranch(int)>(247);
        goto label3;

     label2:
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(254);
        $z0 = r0.<stringbuffer.StringBuffer: boolean shared>;
        staticinvoke <rvpredict.logging.RecordRT: void logBranch(int)>(248);
        if $z0 == 0 goto label3;

        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(255);
        specialinvoke r0.<stringbuffer.StringBuffer: void copy()>();

     label3:
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(256);
        $r4 = r0.<stringbuffer.StringBuffer: char[] value>;
        $r5 = r0.<stringbuffer.StringBuffer: char[] value>;
        $i6 = i0 + i1;
        $i7 = r0.<stringbuffer.StringBuffer: int count>;
        $i8 = $i7 - i0;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, i0, $r5, $i6, $i8);
        $r6 = r0.<stringbuffer.StringBuffer: char[] value>;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, $r6, i0, i1);
        r0.<stringbuffer.StringBuffer: int count> = i2;
        return r0;
    }

    public stringbuffer.StringBuffer insert(int, boolean)
    {
        stringbuffer.StringBuffer r0, $r2;
        int i0;
        boolean z0;
        java.lang.String $r1;

        r0 := @this: stringbuffer.StringBuffer;
        i0 := @parameter0: int;
        z0 := @parameter1: boolean;
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(257);
        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(boolean)>(z0);
        $r2 = virtualinvoke r0.<stringbuffer.StringBuffer: stringbuffer.StringBuffer insert(int,java.lang.String)>(i0, $r1);
        return $r2;
    }

    public synchronized stringbuffer.StringBuffer insert(int, char)
    {
        stringbuffer.StringBuffer r0;
        int i0, i2, $i3, $i4, $i5, $i6, $i7;
        char c1;
        char[] $r1, $r2, $r3, $r4;
        boolean $z0;

        r0 := @this: stringbuffer.StringBuffer;
        i0 := @parameter0: int;
        c1 := @parameter1: char;
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(261);
        $i3 = r0.<stringbuffer.StringBuffer: int count>;
        i2 = $i3 + 1;
        $r1 = r0.<stringbuffer.StringBuffer: char[] value>;
        $i4 = lengthof $r1;
        staticinvoke <rvpredict.logging.RecordRT: void logBranch(int)>(258);
        if i2 <= $i4 goto label0;

        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(262);
        specialinvoke r0.<stringbuffer.StringBuffer: void expandCapacity(int)>(i2);
        staticinvoke <rvpredict.logging.RecordRT: void logBranch(int)>(259);
        goto label1;

     label0:
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(263);
        $z0 = r0.<stringbuffer.StringBuffer: boolean shared>;
        staticinvoke <rvpredict.logging.RecordRT: void logBranch(int)>(260);
        if $z0 == 0 goto label1;

        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(264);
        specialinvoke r0.<stringbuffer.StringBuffer: void copy()>();

     label1:
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(265);
        $r2 = r0.<stringbuffer.StringBuffer: char[] value>;
        $r3 = r0.<stringbuffer.StringBuffer: char[] value>;
        $i5 = i0 + 1;
        $i6 = r0.<stringbuffer.StringBuffer: int count>;
        $i7 = $i6 - i0;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, i0, $r3, $i5, $i7);
        $r4 = r0.<stringbuffer.StringBuffer: char[] value>;
        $r4[i0] = c1;
        r0.<stringbuffer.StringBuffer: int count> = i2;
        return r0;
    }

    public stringbuffer.StringBuffer insert(int, int)
    {
        stringbuffer.StringBuffer r0, $r2;
        int i0, i1;
        java.lang.String $r1;

        r0 := @this: stringbuffer.StringBuffer;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(266);
        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i1);
        $r2 = virtualinvoke r0.<stringbuffer.StringBuffer: stringbuffer.StringBuffer insert(int,java.lang.String)>(i0, $r1);
        return $r2;
    }

    public stringbuffer.StringBuffer insert(int, long)
    {
        stringbuffer.StringBuffer r0, $r2;
        int i0;
        long l1;
        java.lang.String $r1;

        r0 := @this: stringbuffer.StringBuffer;
        i0 := @parameter0: int;
        l1 := @parameter1: long;
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(267);
        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(l1);
        $r2 = virtualinvoke r0.<stringbuffer.StringBuffer: stringbuffer.StringBuffer insert(int,java.lang.String)>(i0, $r1);
        return $r2;
    }

    public stringbuffer.StringBuffer insert(int, float)
    {
        stringbuffer.StringBuffer r0, $r2;
        int i0;
        float f0;
        java.lang.String $r1;

        r0 := @this: stringbuffer.StringBuffer;
        i0 := @parameter0: int;
        f0 := @parameter1: float;
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(268);
        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(float)>(f0);
        $r2 = virtualinvoke r0.<stringbuffer.StringBuffer: stringbuffer.StringBuffer insert(int,java.lang.String)>(i0, $r1);
        return $r2;
    }

    public stringbuffer.StringBuffer insert(int, double)
    {
        stringbuffer.StringBuffer r0, $r2;
        int i0;
        double d0;
        java.lang.String $r1;

        r0 := @this: stringbuffer.StringBuffer;
        i0 := @parameter0: int;
        d0 := @parameter1: double;
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(269);
        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(double)>(d0);
        $r2 = virtualinvoke r0.<stringbuffer.StringBuffer: stringbuffer.StringBuffer insert(int,java.lang.String)>(i0, $r1);
        return $r2;
    }

    public synchronized stringbuffer.StringBuffer reverse()
    {
        stringbuffer.StringBuffer r0;
        int i0, i1, $i3, $i4, $i5, $i7;
        char c2, $c6;
        boolean $z0;
        char[] $r1, $r2, $r3, $r4;

        r0 := @this: stringbuffer.StringBuffer;
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(273);
        $z0 = r0.<stringbuffer.StringBuffer: boolean shared>;
        staticinvoke <rvpredict.logging.RecordRT: void logBranch(int)>(270);
        if $z0 == 0 goto label0;

        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(274);
        specialinvoke r0.<stringbuffer.StringBuffer: void copy()>();

     label0:
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(275);
        $i3 = r0.<stringbuffer.StringBuffer: int count>;
        i0 = $i3 - 1;
        $i4 = i0 - 1;
        i1 = $i4 >> 1;
        staticinvoke <rvpredict.logging.RecordRT: void logBranch(int)>(271);
        goto label2;

     label1:
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(276);
        $r1 = r0.<stringbuffer.StringBuffer: char[] value>;
        c2 = $r1[i1];
        $r2 = r0.<stringbuffer.StringBuffer: char[] value>;
        $r3 = r0.<stringbuffer.StringBuffer: char[] value>;
        $i5 = i0 - i1;
        $c6 = $r3[$i5];
        $r2[i1] = $c6;
        $r4 = r0.<stringbuffer.StringBuffer: char[] value>;
        $i7 = i0 - i1;
        $r4[$i7] = c2;
        i1 = i1 + -1;

     label2:
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(277);
        staticinvoke <rvpredict.logging.RecordRT: void logBranch(int)>(272);
        if i1 >= 0 goto label1;

        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(278);
        return r0;
    }

    public java.lang.String toString()
    {
        stringbuffer.StringBuffer r0;
        java.lang.String $r1;
        char[] $r2;

        r0 := @this: stringbuffer.StringBuffer;
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(279);
        $r1 = new java.lang.String;
        $r2 = r0.<stringbuffer.StringBuffer: char[] value>;
        specialinvoke $r1.<java.lang.String: void <init>(char[])>($r2);
        return $r1;
    }

    final void setShared()
    {
        stringbuffer.StringBuffer r0;

        r0 := @this: stringbuffer.StringBuffer;
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(280);
        r0.<stringbuffer.StringBuffer: boolean shared> = 1;
        return;
    }

    final char[] getValue()
    {
        stringbuffer.StringBuffer r0;
        char[] $r1;

        r0 := @this: stringbuffer.StringBuffer;
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(281);
        $r1 = r0.<stringbuffer.StringBuffer: char[] value>;
        return $r1;
    }

    private synchronized void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        stringbuffer.StringBuffer r0;
        java.io.ObjectInputStream r1;
        char[] $r2, $r4;
        java.lang.Object $r3;

        r0 := @this: stringbuffer.StringBuffer;
        r1 := @parameter0: java.io.ObjectInputStream;
        staticinvoke <rvpredict.logging.RecordRT: void logBasicBlock(int)>(282);
        virtualinvoke r1.<java.io.ObjectInputStream: void defaultReadObject()>();
        $r2 = r0.<stringbuffer.StringBuffer: char[] value>;
        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();
        $r4 = (char[]) $r3;
        r0.<stringbuffer.StringBuffer: char[] value> = $r4;
        r0.<stringbuffer.StringBuffer: boolean shared> = 0;
        return;
    }
}
