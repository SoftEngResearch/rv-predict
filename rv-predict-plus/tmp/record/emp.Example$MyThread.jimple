class emp.Example$MyThread extends java.lang.Thread
{
    int id;
    emp.Example t;

    void <init>(emp.Example, int)
    {
        emp.Example$MyThread r0;
        emp.Example r1;
        int i0;

        r0 := @this: emp.Example$MyThread;
        r1 := @parameter0: emp.Example;
        i0 := @parameter1: int;
        specialinvoke r0.<java.lang.Thread: void <init>()>();
        r0.<emp.Example$MyThread: emp.Example t> = r1;
        r0.<emp.Example$MyThread: int id> = i0;
        return;
    }

    private void inc()
    {
        emp.Example$MyThread r0;
        emp.Example $r1, $r2, rv_local1, rv_local2;
        int $i0, $i1, $i2;
        java.lang.Int rv_local3, rv_local4, rv_local5;

        r0 := @this: emp.Example$MyThread;
        $r1 = r0.<emp.Example$MyThread: emp.Example t>;
        rv_local1 = $r1;
        staticinvoke <rvpredict.logging.RecordRT: void logFieldAcc(int,java.lang.Object,int,java.lang.Object,boolean)>(22, r0, 9, rv_local1, 0);
        $r2 = r0.<emp.Example$MyThread: emp.Example t>;
        rv_local2 = $r2;
        staticinvoke <rvpredict.logging.RecordRT: void logFieldAcc(int,java.lang.Object,int,java.lang.Object,boolean)>(23, r0, 9, rv_local2, 0);
        $i0 = $r2.<emp.Example: int x>;
        rv_local3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);
        staticinvoke <rvpredict.logging.RecordRT: void logFieldAcc(int,java.lang.Object,int,java.lang.Object,boolean)>(24, $r2, 5, rv_local3, 0);
        $i1 = r0.<emp.Example$MyThread: int id>;
        rv_local4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);
        staticinvoke <rvpredict.logging.RecordRT: void logFieldAcc(int,java.lang.Object,int,java.lang.Object,boolean)>(25, r0, 10, rv_local4, 0);
        $i2 = $i0 + $i1;
        $r1.<emp.Example: int x> = $i2;
        rv_local5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);
        staticinvoke <rvpredict.logging.RecordRT: void logFieldAcc(int,java.lang.Object,int,java.lang.Object,boolean)>(26, $r1, 5, rv_local5, 1);
        return;
    }

    private void dec()
    {
        emp.Example$MyThread r0;
        emp.Example $r1, $r2, rv_local1, rv_local2;
        int $i0, $i1, $i2;
        java.lang.Int rv_local3, rv_local4, rv_local5;

        r0 := @this: emp.Example$MyThread;
        $r1 = r0.<emp.Example$MyThread: emp.Example t>;
        rv_local1 = $r1;
        staticinvoke <rvpredict.logging.RecordRT: void logFieldAcc(int,java.lang.Object,int,java.lang.Object,boolean)>(27, r0, 9, rv_local1, 0);
        $r2 = r0.<emp.Example$MyThread: emp.Example t>;
        rv_local2 = $r2;
        staticinvoke <rvpredict.logging.RecordRT: void logFieldAcc(int,java.lang.Object,int,java.lang.Object,boolean)>(28, r0, 9, rv_local2, 0);
        $i0 = $r2.<emp.Example: int x>;
        rv_local3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);
        staticinvoke <rvpredict.logging.RecordRT: void logFieldAcc(int,java.lang.Object,int,java.lang.Object,boolean)>(29, $r2, 5, rv_local3, 0);
        $i1 = r0.<emp.Example$MyThread: int id>;
        rv_local4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);
        staticinvoke <rvpredict.logging.RecordRT: void logFieldAcc(int,java.lang.Object,int,java.lang.Object,boolean)>(30, r0, 10, rv_local4, 0);
        $i2 = $i0 - $i1;
        $r1.<emp.Example: int x> = $i2;
        rv_local5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);
        staticinvoke <rvpredict.logging.RecordRT: void logFieldAcc(int,java.lang.Object,int,java.lang.Object,boolean)>(31, $r1, 5, rv_local5, 1);
        return;
    }

    private void mul()
    {
        emp.Example$MyThread r0;
        emp.Example $r1, $r2, rv_local1, rv_local2;
        int $i0, $i1, $i2;
        java.lang.Int rv_local3, rv_local4, rv_local5;

        r0 := @this: emp.Example$MyThread;
        $r1 = r0.<emp.Example$MyThread: emp.Example t>;
        rv_local1 = $r1;
        staticinvoke <rvpredict.logging.RecordRT: void logFieldAcc(int,java.lang.Object,int,java.lang.Object,boolean)>(32, r0, 9, rv_local1, 0);
        $r2 = r0.<emp.Example$MyThread: emp.Example t>;
        rv_local2 = $r2;
        staticinvoke <rvpredict.logging.RecordRT: void logFieldAcc(int,java.lang.Object,int,java.lang.Object,boolean)>(33, r0, 9, rv_local2, 0);
        $i0 = $r2.<emp.Example: int x>;
        rv_local3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);
        staticinvoke <rvpredict.logging.RecordRT: void logFieldAcc(int,java.lang.Object,int,java.lang.Object,boolean)>(34, $r2, 5, rv_local3, 0);
        $i1 = r0.<emp.Example$MyThread: int id>;
        rv_local4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);
        staticinvoke <rvpredict.logging.RecordRT: void logFieldAcc(int,java.lang.Object,int,java.lang.Object,boolean)>(35, r0, 10, rv_local4, 0);
        $i2 = $i0 * $i1;
        $r1.<emp.Example: int x> = $i2;
        rv_local5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);
        staticinvoke <rvpredict.logging.RecordRT: void logFieldAcc(int,java.lang.Object,int,java.lang.Object,boolean)>(36, $r1, 5, rv_local5, 1);
        return;
    }

    private void div()
    {
        emp.Example$MyThread r0;
        emp.Example $r1, $r2, rv_local1, rv_local2;
        int $i0, $i1, $i2;
        java.lang.Int rv_local3, rv_local4, rv_local5;

        r0 := @this: emp.Example$MyThread;
        $r1 = r0.<emp.Example$MyThread: emp.Example t>;
        rv_local1 = $r1;
        staticinvoke <rvpredict.logging.RecordRT: void logFieldAcc(int,java.lang.Object,int,java.lang.Object,boolean)>(37, r0, 9, rv_local1, 0);
        $r2 = r0.<emp.Example$MyThread: emp.Example t>;
        rv_local2 = $r2;
        staticinvoke <rvpredict.logging.RecordRT: void logFieldAcc(int,java.lang.Object,int,java.lang.Object,boolean)>(38, r0, 9, rv_local2, 0);
        $i0 = $r2.<emp.Example: int x>;
        rv_local3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);
        staticinvoke <rvpredict.logging.RecordRT: void logFieldAcc(int,java.lang.Object,int,java.lang.Object,boolean)>(39, $r2, 5, rv_local3, 0);
        $i1 = r0.<emp.Example$MyThread: int id>;
        rv_local4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);
        staticinvoke <rvpredict.logging.RecordRT: void logFieldAcc(int,java.lang.Object,int,java.lang.Object,boolean)>(40, r0, 10, rv_local4, 0);
        $i2 = $i0 / $i1;
        $r1.<emp.Example: int x> = $i2;
        rv_local5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);
        staticinvoke <rvpredict.logging.RecordRT: void logFieldAcc(int,java.lang.Object,int,java.lang.Object,boolean)>(41, $r1, 5, rv_local5, 1);
        return;
    }

    private synchronized void m()
    {
        emp.Example$MyThread r0;
        emp.LocalClass $r1, r2;

        r0 := @this: emp.Example$MyThread;
        $r1 = new emp.LocalClass;
        specialinvoke $r1.<emp.LocalClass: void <init>()>();
        r2 = $r1;
        virtualinvoke r2.<emp.LocalClass: void setX(int)>(0);
        virtualinvoke r2.<emp.LocalClass: int getX()>();
        specialinvoke r0.<emp.Example$MyThread: void inc()>();
        specialinvoke r0.<emp.Example$MyThread: void dec()>();
        return;
    }

    public static synchronized void m2()
    {
        java.io.PrintStream $r0, rv_local1;

        $r0 = <java.lang.System: java.io.PrintStream out>;
        rv_local1 = $r0;
        staticinvoke <rvpredict.logging.RecordRT: void logFieldAcc(int,java.lang.Object,int,java.lang.Object,boolean)>(42, null, 8, rv_local1, 0);
        virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>("Hello");
        return;
    }

    public void run()
    {
        emp.Example$MyThread r0;
        int i0, i1, $i2, $i3, $i4;
        emp.LocalClass r1, $r4;
        emp.Example r2, $r5, $r7, $r8, $r10, $r11, $r12, $r15, r16, $r17, $r18, rv_local1, rv_local3, rv_local4, rv_local7, rv_local10, rv_local11, rv_local12, rv_local13, rv_local15;
        java.lang.InterruptedException r3, $r13;
        java.util.Random $r6, $r9, rv_local2, rv_local5;
        boolean $z0;
        java.lang.Throwable $r14, $r19;
        java.lang.Boolean rv_local6;
        java.lang.Int rv_local8, rv_local9, rv_local14, rv_local16;

        r0 := @this: emp.Example$MyThread;
        i0 = 0;
        staticinvoke <rvpredict.logging.RecordRT: void logBranch(int)>(43);
        goto label20;

     label0:
        $r4 = new emp.LocalClass;
        specialinvoke $r4.<emp.LocalClass: void <init>()>();
        r1 = $r4;
        $r5 = r0.<emp.Example$MyThread: emp.Example t>;
        rv_local1 = $r5;
        staticinvoke <rvpredict.logging.RecordRT: void logFieldAcc(int,java.lang.Object,int,java.lang.Object,boolean)>(44, r0, 9, rv_local1, 0);
        $r6 = $r5.<emp.Example: java.util.Random r>;
        rv_local2 = $r6;
        staticinvoke <rvpredict.logging.RecordRT: void logFieldAcc(int,java.lang.Object,int,java.lang.Object,boolean)>(45, $r5, 4, rv_local2, 0);
        $i2 = virtualinvoke $r6.<java.util.Random: int nextInt()>();
        virtualinvoke r1.<emp.LocalClass: void setX(int)>($i2);
        i1 = virtualinvoke r1.<emp.LocalClass: int getX()>();
        staticinvoke <rvpredict.logging.RecordRT: void logBranch(int)>(46);
        if i1 <= 10 goto label1;

        $r7 = r0.<emp.Example$MyThread: emp.Example t>;
        rv_local3 = $r7;
        staticinvoke <rvpredict.logging.RecordRT: void logFieldAcc(int,java.lang.Object,int,java.lang.Object,boolean)>(47, r0, 9, rv_local3, 0);
        $r8 = r0.<emp.Example$MyThread: emp.Example t>;
        rv_local4 = $r8;
        staticinvoke <rvpredict.logging.RecordRT: void logFieldAcc(int,java.lang.Object,int,java.lang.Object,boolean)>(48, r0, 9, rv_local4, 0);
        $r9 = $r8.<emp.Example: java.util.Random r>;
        rv_local5 = $r9;
        staticinvoke <rvpredict.logging.RecordRT: void logFieldAcc(int,java.lang.Object,int,java.lang.Object,boolean)>(49, $r8, 4, rv_local5, 0);
        $z0 = virtualinvoke $r9.<java.util.Random: boolean nextBoolean()>();
        $r7.<emp.Example: boolean b> = $z0;
        rv_local6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);
        staticinvoke <rvpredict.logging.RecordRT: void logFieldAcc(int,java.lang.Object,int,java.lang.Object,boolean)>(50, $r7, 11, rv_local6, 1);
        staticinvoke <rvpredict.logging.RecordRT: void logBranch(int)>(51);
        goto label2;

     label1:
        $r10 = r0.<emp.Example$MyThread: emp.Example t>;
        rv_local7 = $r10;
        staticinvoke <rvpredict.logging.RecordRT: void logFieldAcc(int,java.lang.Object,int,java.lang.Object,boolean)>(52, r0, 9, rv_local7, 0);
        $r10.<emp.Example: boolean b> = 1;
        rv_local8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

     label2:
        staticinvoke <rvpredict.logging.RecordRT: void logFieldAcc(int,java.lang.Object,int,java.lang.Object,boolean)>(53, $r10, 11, rv_local8, 1);
        $i3 = r0.<emp.Example$MyThread: int id>;
        rv_local9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);
        staticinvoke <rvpredict.logging.RecordRT: void logFieldAcc(int,java.lang.Object,int,java.lang.Object,boolean)>(54, r0, 10, rv_local9, 0);
        staticinvoke <rvpredict.logging.RecordRT: void logBranch(int)>(55);
        if $i3 >= 2 goto label13;

        $r11 = r0.<emp.Example$MyThread: emp.Example t>;
        rv_local10 = $r11;
        staticinvoke <rvpredict.logging.RecordRT: void logFieldAcc(int,java.lang.Object,int,java.lang.Object,boolean)>(56, r0, 9, rv_local10, 0);
        r2 = $r11;
        entermonitor $r11;
        staticinvoke <rvpredict.logging.RecordRT: void logLock(int,java.lang.Object)>(57, $r11);

     label3:
        specialinvoke r0.<emp.Example$MyThread: void inc()>();

     label4:
        $r12 = r0.<emp.Example$MyThread: emp.Example t>;
        rv_local11 = $r12;
        staticinvoke <rvpredict.logging.RecordRT: void logFieldAcc(int,java.lang.Object,int,java.lang.Object,boolean)>(58, r0, 9, rv_local11, 0);
        virtualinvoke $r12.<java.lang.Object: void wait(long)>(10L);
        specialinvoke r0.<emp.Example$MyThread: void dec()>();

     label5:
        staticinvoke <rvpredict.logging.RecordRT: void logBranch(int)>(59);
        goto label7;

     label6:
        $r13 := @caughtexception;
        r3 = $r13;
        virtualinvoke r3.<java.lang.InterruptedException: void printStackTrace()>();

     label7:
        staticinvoke <rvpredict.logging.RecordRT: void logUnlock(int,java.lang.Object)>(60, r2);
        exitmonitor r2;

     label8:
        staticinvoke <rvpredict.logging.RecordRT: void logBranch(int)>(61);
        goto label12;

     label9:
        $r14 := @caughtexception;

     label10:
        staticinvoke <rvpredict.logging.RecordRT: void logUnlock(int,java.lang.Object)>(60, r2);
        exitmonitor r2;

     label11:
        throw $r14;

     label12:
        staticinvoke <rvpredict.logging.RecordRT: void logLock(int,java.lang.Object)>(62, r0);
        specialinvoke r0.<emp.Example$MyThread: void m()>();
        staticinvoke <rvpredict.logging.RecordRT: void logUnlock(int,java.lang.Object)>(62, r0);
        staticinvoke <rvpredict.logging.RecordRT: void logStaticSyncLock(int,int)>(63, 12);
        staticinvoke <emp.Example$MyThread: void m2()>();
        staticinvoke <rvpredict.logging.RecordRT: void logStaticSyncUnlock(int,int)>(63, 12);
        staticinvoke <rvpredict.logging.RecordRT: void logBranch(int)>(64);
        goto label19;

     label13:
        $r15 = r0.<emp.Example$MyThread: emp.Example t>;
        rv_local12 = $r15;
        staticinvoke <rvpredict.logging.RecordRT: void logFieldAcc(int,java.lang.Object,int,java.lang.Object,boolean)>(65, r0, 9, rv_local12, 0);
        r16 = $r15;
        entermonitor $r15;
        staticinvoke <rvpredict.logging.RecordRT: void logLock(int,java.lang.Object)>(66, $r15);

     label14:
        $r17 = r0.<emp.Example$MyThread: emp.Example t>;
        rv_local13 = $r17;
        staticinvoke <rvpredict.logging.RecordRT: void logFieldAcc(int,java.lang.Object,int,java.lang.Object,boolean)>(67, r0, 9, rv_local13, 0);
        $r17.<emp.Example: boolean b> = 1;
        rv_local14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);
        staticinvoke <rvpredict.logging.RecordRT: void logFieldAcc(int,java.lang.Object,int,java.lang.Object,boolean)>(68, $r17, 11, rv_local14, 1);
        $r18 = r0.<emp.Example$MyThread: emp.Example t>;
        rv_local15 = $r18;
        staticinvoke <rvpredict.logging.RecordRT: void logFieldAcc(int,java.lang.Object,int,java.lang.Object,boolean)>(69, r0, 9, rv_local15, 0);
        staticinvoke <rvpredict.logging.RecordRT: void logNotify(int,java.lang.Object)>(70, $r18);
        virtualinvoke $r18.<java.lang.Object: void notify()>();
        specialinvoke r0.<emp.Example$MyThread: void mul()>();
        specialinvoke r0.<emp.Example$MyThread: void div()>();
        staticinvoke <rvpredict.logging.RecordRT: void logUnlock(int,java.lang.Object)>(71, r16);
        exitmonitor r16;

     label15:
        staticinvoke <rvpredict.logging.RecordRT: void logBranch(int)>(72);
        goto label19;

     label16:
        $r19 := @caughtexception;

     label17:
        staticinvoke <rvpredict.logging.RecordRT: void logUnlock(int,java.lang.Object)>(71, r16);
        exitmonitor r16;

     label18:
        throw $r19;

     label19:
        i0 = i0 + 1;

     label20:
        $i4 = <emp.Example: int TIMES>;
        rv_local16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);
        staticinvoke <rvpredict.logging.RecordRT: void logFieldAcc(int,java.lang.Object,int,java.lang.Object,boolean)>(73, null, 1, rv_local16, 0);
        staticinvoke <rvpredict.logging.RecordRT: void logBranch(int)>(74);
        if i0 < $i4 goto label0;

        return;

        catch java.lang.InterruptedException from label4 to label5 with label6;
        catch java.lang.Throwable from label3 to label8 with label9;
        catch java.lang.Throwable from label10 to label11 with label9;
        catch java.lang.Throwable from label14 to label15 with label16;
        catch java.lang.Throwable from label17 to label18 with label16;
    }
}
